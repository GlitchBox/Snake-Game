
sensortry.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002704  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  00002704  00002798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000249  008000d0  008000d0  00002808  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002808  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002838  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00002874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b3d  00000000  00000000  00002a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008dd  00000000  00000000  00006589  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e87  00000000  00000000  00006e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000060c  00000000  00000000  00008cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000761  00000000  00000000  000092fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002514  00000000  00000000  00009a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0000bf71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3d       	cpi	r26, 0xD0	; 208
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	a0 ed       	ldi	r26, 0xD0	; 208
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 31       	cpi	r26, 0x19	; 25
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 30 10 	call	0x2060	; 0x2060 <main>
      8a:	0c 94 80 13 	jmp	0x2700	; 0x2700 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time>:
      92:	fc 01       	movw	r30, r24
      94:	0f b6       	in	r0, 0x3f	; 63
      96:	f8 94       	cli
      98:	60 91 15 03 	lds	r22, 0x0315	; 0x800315 <__system_time>
      9c:	70 91 16 03 	lds	r23, 0x0316	; 0x800316 <__system_time+0x1>
      a0:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <__system_time+0x2>
      a4:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <__system_time+0x3>
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	30 97       	sbiw	r30, 0x00	; 0
      ac:	21 f0       	breq	.+8      	; 0xb6 <time+0x24>
      ae:	60 83       	st	Z, r22
      b0:	71 83       	std	Z+1, r23	; 0x01
      b2:	82 83       	std	Z+2, r24	; 0x02
      b4:	93 83       	std	Z+3, r25	; 0x03
      b6:	08 95       	ret

000000b8 <I2C_Init>:
}

int fourthLevelIt()
{
	return ((fasterIteration*3+fasterIteration*delayVal)/(3+delayVal+36*2));
}
      b8:	11 b8       	out	0x01, r1	; 1
      ba:	80 e2       	ldi	r24, 0x20	; 32
      bc:	80 b9       	out	0x00, r24	; 0
      be:	08 95       	ret

000000c0 <I2C_Start_Wait>:
      c0:	94 ea       	ldi	r25, 0xA4	; 164
      c2:	96 bf       	out	0x36, r25	; 54
      c4:	06 b6       	in	r0, 0x36	; 54
      c6:	07 fe       	sbrs	r0, 7
      c8:	fd cf       	rjmp	.-6      	; 0xc4 <I2C_Start_Wait+0x4>
      ca:	91 b1       	in	r25, 0x01	; 1
      cc:	98 7f       	andi	r25, 0xF8	; 248
      ce:	98 30       	cpi	r25, 0x08	; 8
      d0:	71 f4       	brne	.+28     	; 0xee <I2C_Start_Wait+0x2e>
      d2:	83 b9       	out	0x03, r24	; 3
      d4:	84 e8       	ldi	r24, 0x84	; 132
      d6:	86 bf       	out	0x36, r24	; 54
      d8:	06 b6       	in	r0, 0x36	; 54
      da:	07 fe       	sbrs	r0, 7
      dc:	fd cf       	rjmp	.-6      	; 0xd8 <I2C_Start_Wait+0x18>
      de:	81 b1       	in	r24, 0x01	; 1
      e0:	88 7f       	andi	r24, 0xF8	; 248
      e2:	88 31       	cpi	r24, 0x18	; 24
      e4:	31 f0       	breq	.+12     	; 0xf2 <I2C_Start_Wait+0x32>
      e6:	80 32       	cpi	r24, 0x20	; 32
      e8:	31 f0       	breq	.+12     	; 0xf6 <I2C_Start_Wait+0x36>
      ea:	83 e0       	ldi	r24, 0x03	; 3
      ec:	08 95       	ret
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	08 95       	ret
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	08 95       	ret
      f6:	82 e0       	ldi	r24, 0x02	; 2
      f8:	08 95       	ret

000000fa <I2C_Repeated_Start>:
      fa:	94 ea       	ldi	r25, 0xA4	; 164
      fc:	96 bf       	out	0x36, r25	; 54
      fe:	06 b6       	in	r0, 0x36	; 54
     100:	07 fe       	sbrs	r0, 7
     102:	fd cf       	rjmp	.-6      	; 0xfe <I2C_Repeated_Start+0x4>
     104:	91 b1       	in	r25, 0x01	; 1
     106:	98 7f       	andi	r25, 0xF8	; 248
     108:	90 31       	cpi	r25, 0x10	; 16
     10a:	71 f4       	brne	.+28     	; 0x128 <I2C_Repeated_Start+0x2e>
     10c:	83 b9       	out	0x03, r24	; 3
     10e:	84 e8       	ldi	r24, 0x84	; 132
     110:	86 bf       	out	0x36, r24	; 54
     112:	06 b6       	in	r0, 0x36	; 54
     114:	07 fe       	sbrs	r0, 7
     116:	fd cf       	rjmp	.-6      	; 0x112 <I2C_Repeated_Start+0x18>
     118:	81 b1       	in	r24, 0x01	; 1
     11a:	88 7f       	andi	r24, 0xF8	; 248
     11c:	80 34       	cpi	r24, 0x40	; 64
     11e:	31 f0       	breq	.+12     	; 0x12c <I2C_Repeated_Start+0x32>
     120:	80 32       	cpi	r24, 0x20	; 32
     122:	31 f0       	breq	.+12     	; 0x130 <I2C_Repeated_Start+0x36>
     124:	83 e0       	ldi	r24, 0x03	; 3
     126:	08 95       	ret
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	08 95       	ret
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	08 95       	ret
     130:	82 e0       	ldi	r24, 0x02	; 2
     132:	08 95       	ret

00000134 <I2C_Write>:
     134:	83 b9       	out	0x03, r24	; 3
     136:	84 e8       	ldi	r24, 0x84	; 132
     138:	86 bf       	out	0x36, r24	; 54
     13a:	06 b6       	in	r0, 0x36	; 54
     13c:	07 fe       	sbrs	r0, 7
     13e:	fd cf       	rjmp	.-6      	; 0x13a <I2C_Write+0x6>
     140:	81 b1       	in	r24, 0x01	; 1
     142:	88 7f       	andi	r24, 0xF8	; 248
     144:	88 32       	cpi	r24, 0x28	; 40
     146:	21 f0       	breq	.+8      	; 0x150 <I2C_Write+0x1c>
     148:	80 33       	cpi	r24, 0x30	; 48
     14a:	21 f0       	breq	.+8      	; 0x154 <I2C_Write+0x20>
     14c:	82 e0       	ldi	r24, 0x02	; 2
     14e:	08 95       	ret
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	08 95       	ret
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	08 95       	ret

00000158 <I2C_Read_Ack>:
     158:	84 ec       	ldi	r24, 0xC4	; 196
     15a:	86 bf       	out	0x36, r24	; 54
     15c:	06 b6       	in	r0, 0x36	; 54
     15e:	07 fe       	sbrs	r0, 7
     160:	fd cf       	rjmp	.-6      	; 0x15c <I2C_Read_Ack+0x4>
     162:	83 b1       	in	r24, 0x03	; 3
     164:	08 95       	ret

00000166 <I2C_Read_Nack>:
     166:	84 e8       	ldi	r24, 0x84	; 132
     168:	86 bf       	out	0x36, r24	; 54
     16a:	06 b6       	in	r0, 0x36	; 54
     16c:	07 fe       	sbrs	r0, 7
     16e:	fd cf       	rjmp	.-6      	; 0x16a <I2C_Read_Nack+0x4>
     170:	83 b1       	in	r24, 0x03	; 3
     172:	08 95       	ret

00000174 <I2C_Stop>:
     174:	84 e9       	ldi	r24, 0x94	; 148
     176:	86 bf       	out	0x36, r24	; 54
     178:	06 b6       	in	r0, 0x36	; 54
     17a:	04 fc       	sbrc	r0, 4
     17c:	fd cf       	rjmp	.-6      	; 0x178 <I2C_Stop+0x4>
     17e:	08 95       	ret

00000180 <Gyro_Init>:
     180:	2f e7       	ldi	r18, 0x7F	; 127
     182:	89 ea       	ldi	r24, 0xA9	; 169
     184:	93 e0       	ldi	r25, 0x03	; 3
     186:	21 50       	subi	r18, 0x01	; 1
     188:	80 40       	sbci	r24, 0x00	; 0
     18a:	90 40       	sbci	r25, 0x00	; 0
     18c:	e1 f7       	brne	.-8      	; 0x186 <Gyro_Init+0x6>
     18e:	00 c0       	rjmp	.+0      	; 0x190 <Gyro_Init+0x10>
     190:	00 00       	nop
     192:	80 ed       	ldi	r24, 0xD0	; 208
     194:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     198:	89 e1       	ldi	r24, 0x19	; 25
     19a:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     19e:	87 e0       	ldi	r24, 0x07	; 7
     1a0:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     1a4:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     1a8:	80 ed       	ldi	r24, 0xD0	; 208
     1aa:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     1ae:	8b e6       	ldi	r24, 0x6B	; 107
     1b0:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     1ba:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     1be:	80 ed       	ldi	r24, 0xD0	; 208
     1c0:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     1c4:	8a e1       	ldi	r24, 0x1A	; 26
     1c6:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     1d0:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     1d4:	80 ed       	ldi	r24, 0xD0	; 208
     1d6:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     1da:	8b e1       	ldi	r24, 0x1B	; 27
     1dc:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     1e0:	88 e1       	ldi	r24, 0x18	; 24
     1e2:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     1e6:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     1ea:	80 ed       	ldi	r24, 0xD0	; 208
     1ec:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     1f0:	8c e1       	ldi	r24, 0x1C	; 28
     1f2:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     1fc:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     200:	80 ed       	ldi	r24, 0xD0	; 208
     202:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     206:	8f e1       	ldi	r24, 0x1F	; 31
     208:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     212:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     216:	80 ed       	ldi	r24, 0xD0	; 208
     218:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     21c:	83 e2       	ldi	r24, 0x23	; 35
     21e:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     228:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     22c:	80 ed       	ldi	r24, 0xD0	; 208
     22e:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     232:	8d e1       	ldi	r24, 0x1D	; 29
     234:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     23e:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     242:	80 ed       	ldi	r24, 0xD0	; 208
     244:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     248:	8e e1       	ldi	r24, 0x1E	; 30
     24a:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     254:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     258:	80 ed       	ldi	r24, 0xD0	; 208
     25a:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     25e:	80 e2       	ldi	r24, 0x20	; 32
     260:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     26a:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     26e:	80 ed       	ldi	r24, 0xD0	; 208
     270:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     274:	82 e2       	ldi	r24, 0x22	; 34
     276:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     280:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     284:	80 ed       	ldi	r24, 0xD0	; 208
     286:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     28a:	81 e2       	ldi	r24, 0x21	; 33
     28c:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     296:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     29a:	80 ed       	ldi	r24, 0xD0	; 208
     29c:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     2a0:	84 e2       	ldi	r24, 0x24	; 36
     2a2:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     2ac:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     2b0:	80 ed       	ldi	r24, 0xD0	; 208
     2b2:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     2b6:	86 e2       	ldi	r24, 0x26	; 38
     2b8:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     2c2:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     2c6:	80 ed       	ldi	r24, 0xD0	; 208
     2c8:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     2cc:	85 e2       	ldi	r24, 0x25	; 37
     2ce:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     2d8:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     2dc:	80 ed       	ldi	r24, 0xD0	; 208
     2de:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     2e2:	87 e2       	ldi	r24, 0x27	; 39
     2e4:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     2ee:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     2f2:	80 ed       	ldi	r24, 0xD0	; 208
     2f4:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     2f8:	89 e2       	ldi	r24, 0x29	; 41
     2fa:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     304:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     308:	80 ed       	ldi	r24, 0xD0	; 208
     30a:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     30e:	88 e2       	ldi	r24, 0x28	; 40
     310:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     31a:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     31e:	80 ed       	ldi	r24, 0xD0	; 208
     320:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     324:	8a e2       	ldi	r24, 0x2A	; 42
     326:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     330:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     334:	80 ed       	ldi	r24, 0xD0	; 208
     336:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     33a:	8c e2       	ldi	r24, 0x2C	; 44
     33c:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     346:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     34a:	80 ed       	ldi	r24, 0xD0	; 208
     34c:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     350:	8b e2       	ldi	r24, 0x2B	; 43
     352:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     35c:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     360:	80 ed       	ldi	r24, 0xD0	; 208
     362:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     366:	8d e2       	ldi	r24, 0x2D	; 45
     368:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     372:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     376:	80 ed       	ldi	r24, 0xD0	; 208
     378:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     37c:	8f e2       	ldi	r24, 0x2F	; 47
     37e:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     388:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     38c:	80 ed       	ldi	r24, 0xD0	; 208
     38e:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     392:	8e e2       	ldi	r24, 0x2E	; 46
     394:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     39e:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     3a2:	80 ed       	ldi	r24, 0xD0	; 208
     3a4:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     3a8:	80 e3       	ldi	r24, 0x30	; 48
     3aa:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     3b4:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     3b8:	80 ed       	ldi	r24, 0xD0	; 208
     3ba:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     3be:	82 e3       	ldi	r24, 0x32	; 50
     3c0:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     3ca:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     3ce:	80 ed       	ldi	r24, 0xD0	; 208
     3d0:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     3d4:	81 e3       	ldi	r24, 0x31	; 49
     3d6:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     3e0:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     3e4:	80 ed       	ldi	r24, 0xD0	; 208
     3e6:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     3ea:	84 e3       	ldi	r24, 0x34	; 52
     3ec:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     3f6:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     3fa:	80 ed       	ldi	r24, 0xD0	; 208
     3fc:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     400:	83 e3       	ldi	r24, 0x33	; 51
     402:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     40c:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     410:	80 ed       	ldi	r24, 0xD0	; 208
     412:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     416:	85 e3       	ldi	r24, 0x35	; 53
     418:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     422:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     426:	80 ed       	ldi	r24, 0xD0	; 208
     428:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     42c:	87 e3       	ldi	r24, 0x37	; 55
     42e:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     438:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     43c:	80 ed       	ldi	r24, 0xD0	; 208
     43e:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     442:	88 e3       	ldi	r24, 0x38	; 56
     444:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     44e:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     452:	80 ed       	ldi	r24, 0xD0	; 208
     454:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     458:	83 e6       	ldi	r24, 0x63	; 99
     45a:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     464:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     468:	80 ed       	ldi	r24, 0xD0	; 208
     46a:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     46e:	84 e6       	ldi	r24, 0x64	; 100
     470:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     47a:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     47e:	80 ed       	ldi	r24, 0xD0	; 208
     480:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     484:	85 e6       	ldi	r24, 0x65	; 101
     486:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     490:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     494:	80 ed       	ldi	r24, 0xD0	; 208
     496:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     49a:	86 e6       	ldi	r24, 0x66	; 102
     49c:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     4a6:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     4aa:	80 ed       	ldi	r24, 0xD0	; 208
     4ac:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     4b0:	87 e6       	ldi	r24, 0x67	; 103
     4b2:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     4bc:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     4c0:	80 ed       	ldi	r24, 0xD0	; 208
     4c2:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     4c6:	88 e6       	ldi	r24, 0x68	; 104
     4c8:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     4d2:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     4d6:	80 ed       	ldi	r24, 0xD0	; 208
     4d8:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     4dc:	89 e6       	ldi	r24, 0x69	; 105
     4de:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     4e8:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     4ec:	80 ed       	ldi	r24, 0xD0	; 208
     4ee:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     4f2:	8a e6       	ldi	r24, 0x6A	; 106
     4f4:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     4fe:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     502:	80 ed       	ldi	r24, 0xD0	; 208
     504:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     508:	8c e6       	ldi	r24, 0x6C	; 108
     50a:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     514:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     518:	80 ed       	ldi	r24, 0xD0	; 208
     51a:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     51e:	84 e7       	ldi	r24, 0x74	; 116
     520:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     52a:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     52e:	08 95       	ret

00000530 <MPU_Start_Loc>:
     530:	80 ed       	ldi	r24, 0xD0	; 208
     532:	0e 94 60 00 	call	0xc0	; 0xc0 <I2C_Start_Wait>
     536:	8b e3       	ldi	r24, 0x3B	; 59
     538:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Write>
     53c:	81 ed       	ldi	r24, 0xD1	; 209
     53e:	0e 94 7d 00 	call	0xfa	; 0xfa <I2C_Repeated_Start>
     542:	08 95       	ret

00000544 <Read_RawValue>:
     544:	5f 92       	push	r5
     546:	6f 92       	push	r6
     548:	7f 92       	push	r7
     54a:	8f 92       	push	r8
     54c:	9f 92       	push	r9
     54e:	af 92       	push	r10
     550:	bf 92       	push	r11
     552:	cf 92       	push	r12
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	5c 01       	movw	r10, r24
     564:	eb 01       	movw	r28, r22
     566:	4a 01       	movw	r8, r20
     568:	39 01       	movw	r6, r18
     56a:	0e 94 98 02 	call	0x530	; 0x530 <MPU_Start_Loc>
     56e:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Read_Ack>
     572:	58 2e       	mov	r5, r24
     574:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Read_Ack>
     578:	65 2d       	mov	r22, r5
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	76 2f       	mov	r23, r22
     57e:	66 27       	eor	r22, r22
     580:	68 2b       	or	r22, r24
     582:	71 95       	neg	r23
     584:	61 95       	neg	r22
     586:	71 09       	sbc	r23, r1
     588:	07 2e       	mov	r0, r23
     58a:	00 0c       	add	r0, r0
     58c:	88 0b       	sbc	r24, r24
     58e:	99 0b       	sbc	r25, r25
     590:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
     594:	f5 01       	movw	r30, r10
     596:	60 83       	st	Z, r22
     598:	71 83       	std	Z+1, r23	; 0x01
     59a:	82 83       	std	Z+2, r24	; 0x02
     59c:	93 83       	std	Z+3, r25	; 0x03
     59e:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Read_Ack>
     5a2:	b8 2e       	mov	r11, r24
     5a4:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Read_Ack>
     5a8:	6b 2d       	mov	r22, r11
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	76 2f       	mov	r23, r22
     5ae:	66 27       	eor	r22, r22
     5b0:	68 2b       	or	r22, r24
     5b2:	71 95       	neg	r23
     5b4:	61 95       	neg	r22
     5b6:	71 09       	sbc	r23, r1
     5b8:	07 2e       	mov	r0, r23
     5ba:	00 0c       	add	r0, r0
     5bc:	88 0b       	sbc	r24, r24
     5be:	99 0b       	sbc	r25, r25
     5c0:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
     5c4:	68 83       	st	Y, r22
     5c6:	79 83       	std	Y+1, r23	; 0x01
     5c8:	8a 83       	std	Y+2, r24	; 0x02
     5ca:	9b 83       	std	Y+3, r25	; 0x03
     5cc:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Read_Ack>
     5d0:	c8 2f       	mov	r28, r24
     5d2:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Read_Ack>
     5d6:	6c 2f       	mov	r22, r28
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	76 2f       	mov	r23, r22
     5dc:	66 27       	eor	r22, r22
     5de:	68 2b       	or	r22, r24
     5e0:	71 95       	neg	r23
     5e2:	61 95       	neg	r22
     5e4:	71 09       	sbc	r23, r1
     5e6:	07 2e       	mov	r0, r23
     5e8:	00 0c       	add	r0, r0
     5ea:	88 0b       	sbc	r24, r24
     5ec:	99 0b       	sbc	r25, r25
     5ee:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
     5f2:	f4 01       	movw	r30, r8
     5f4:	60 83       	st	Z, r22
     5f6:	71 83       	std	Z+1, r23	; 0x01
     5f8:	82 83       	std	Z+2, r24	; 0x02
     5fa:	93 83       	std	Z+3, r25	; 0x03
     5fc:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Read_Ack>
     600:	c8 2f       	mov	r28, r24
     602:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Read_Ack>
     606:	6c 2f       	mov	r22, r28
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	76 2f       	mov	r23, r22
     60c:	66 27       	eor	r22, r22
     60e:	68 2b       	or	r22, r24
     610:	07 2e       	mov	r0, r23
     612:	00 0c       	add	r0, r0
     614:	88 0b       	sbc	r24, r24
     616:	99 0b       	sbc	r25, r25
     618:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
     61c:	f3 01       	movw	r30, r6
     61e:	60 83       	st	Z, r22
     620:	71 83       	std	Z+1, r23	; 0x01
     622:	82 83       	std	Z+2, r24	; 0x02
     624:	93 83       	std	Z+3, r25	; 0x03
     626:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Read_Ack>
     62a:	c8 2f       	mov	r28, r24
     62c:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Read_Ack>
     630:	6c 2f       	mov	r22, r28
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	76 2f       	mov	r23, r22
     636:	66 27       	eor	r22, r22
     638:	68 2b       	or	r22, r24
     63a:	71 95       	neg	r23
     63c:	61 95       	neg	r22
     63e:	71 09       	sbc	r23, r1
     640:	07 2e       	mov	r0, r23
     642:	00 0c       	add	r0, r0
     644:	88 0b       	sbc	r24, r24
     646:	99 0b       	sbc	r25, r25
     648:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
     64c:	f8 01       	movw	r30, r16
     64e:	60 83       	st	Z, r22
     650:	71 83       	std	Z+1, r23	; 0x01
     652:	82 83       	std	Z+2, r24	; 0x02
     654:	93 83       	std	Z+3, r25	; 0x03
     656:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Read_Ack>
     65a:	c8 2f       	mov	r28, r24
     65c:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Read_Ack>
     660:	6c 2f       	mov	r22, r28
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	76 2f       	mov	r23, r22
     666:	66 27       	eor	r22, r22
     668:	68 2b       	or	r22, r24
     66a:	71 95       	neg	r23
     66c:	61 95       	neg	r22
     66e:	71 09       	sbc	r23, r1
     670:	07 2e       	mov	r0, r23
     672:	00 0c       	add	r0, r0
     674:	88 0b       	sbc	r24, r24
     676:	99 0b       	sbc	r25, r25
     678:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
     67c:	f7 01       	movw	r30, r14
     67e:	60 83       	st	Z, r22
     680:	71 83       	std	Z+1, r23	; 0x01
     682:	82 83       	std	Z+2, r24	; 0x02
     684:	93 83       	std	Z+3, r25	; 0x03
     686:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Read_Ack>
     68a:	c8 2f       	mov	r28, r24
     68c:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Read_Nack>
     690:	6c 2f       	mov	r22, r28
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	76 2f       	mov	r23, r22
     696:	66 27       	eor	r22, r22
     698:	68 2b       	or	r22, r24
     69a:	71 95       	neg	r23
     69c:	61 95       	neg	r22
     69e:	71 09       	sbc	r23, r1
     6a0:	07 2e       	mov	r0, r23
     6a2:	00 0c       	add	r0, r0
     6a4:	88 0b       	sbc	r24, r24
     6a6:	99 0b       	sbc	r25, r25
     6a8:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
     6ac:	f6 01       	movw	r30, r12
     6ae:	60 83       	st	Z, r22
     6b0:	71 83       	std	Z+1, r23	; 0x01
     6b2:	82 83       	std	Z+2, r24	; 0x02
     6b4:	93 83       	std	Z+3, r25	; 0x03
     6b6:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_Stop>
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	ff 90       	pop	r15
     6c4:	ef 90       	pop	r14
     6c6:	df 90       	pop	r13
     6c8:	cf 90       	pop	r12
     6ca:	bf 90       	pop	r11
     6cc:	af 90       	pop	r10
     6ce:	9f 90       	pop	r9
     6d0:	8f 90       	pop	r8
     6d2:	7f 90       	pop	r7
     6d4:	6f 90       	pop	r6
     6d6:	5f 90       	pop	r5
     6d8:	08 95       	ret

000006da <pinChange>:
     6da:	67 2b       	or	r22, r23
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <pinChange+0x6>
     6de:	9f c0       	rjmp	.+318    	; 0x81e <pinChange+0x144>
     6e0:	00 97       	sbiw	r24, 0x00	; 0
     6e2:	11 f4       	brne	.+4      	; 0x6e8 <pinChange+0xe>
     6e4:	d8 98       	cbi	0x1b, 0	; 27
     6e6:	08 95       	ret
     6e8:	81 30       	cpi	r24, 0x01	; 1
     6ea:	91 05       	cpc	r25, r1
     6ec:	11 f4       	brne	.+4      	; 0x6f2 <pinChange+0x18>
     6ee:	d9 98       	cbi	0x1b, 1	; 27
     6f0:	08 95       	ret
     6f2:	82 30       	cpi	r24, 0x02	; 2
     6f4:	91 05       	cpc	r25, r1
     6f6:	11 f4       	brne	.+4      	; 0x6fc <pinChange+0x22>
     6f8:	da 98       	cbi	0x1b, 2	; 27
     6fa:	08 95       	ret
     6fc:	83 30       	cpi	r24, 0x03	; 3
     6fe:	91 05       	cpc	r25, r1
     700:	11 f4       	brne	.+4      	; 0x706 <pinChange+0x2c>
     702:	db 98       	cbi	0x1b, 3	; 27
     704:	08 95       	ret
     706:	84 30       	cpi	r24, 0x04	; 4
     708:	91 05       	cpc	r25, r1
     70a:	11 f4       	brne	.+4      	; 0x710 <pinChange+0x36>
     70c:	dc 98       	cbi	0x1b, 4	; 27
     70e:	08 95       	ret
     710:	85 30       	cpi	r24, 0x05	; 5
     712:	91 05       	cpc	r25, r1
     714:	11 f4       	brne	.+4      	; 0x71a <pinChange+0x40>
     716:	dd 98       	cbi	0x1b, 5	; 27
     718:	08 95       	ret
     71a:	86 30       	cpi	r24, 0x06	; 6
     71c:	91 05       	cpc	r25, r1
     71e:	11 f4       	brne	.+4      	; 0x724 <pinChange+0x4a>
     720:	de 98       	cbi	0x1b, 6	; 27
     722:	08 95       	ret
     724:	87 30       	cpi	r24, 0x07	; 7
     726:	91 05       	cpc	r25, r1
     728:	11 f4       	brne	.+4      	; 0x72e <pinChange+0x54>
     72a:	df 98       	cbi	0x1b, 7	; 27
     72c:	08 95       	ret
     72e:	8a 30       	cpi	r24, 0x0A	; 10
     730:	91 05       	cpc	r25, r1
     732:	11 f4       	brne	.+4      	; 0x738 <pinChange+0x5e>
     734:	c0 98       	cbi	0x18, 0	; 24
     736:	08 95       	ret
     738:	8b 30       	cpi	r24, 0x0B	; 11
     73a:	91 05       	cpc	r25, r1
     73c:	11 f4       	brne	.+4      	; 0x742 <pinChange+0x68>
     73e:	c1 98       	cbi	0x18, 1	; 24
     740:	08 95       	ret
     742:	8c 30       	cpi	r24, 0x0C	; 12
     744:	91 05       	cpc	r25, r1
     746:	11 f4       	brne	.+4      	; 0x74c <pinChange+0x72>
     748:	c2 98       	cbi	0x18, 2	; 24
     74a:	08 95       	ret
     74c:	8d 30       	cpi	r24, 0x0D	; 13
     74e:	91 05       	cpc	r25, r1
     750:	11 f4       	brne	.+4      	; 0x756 <pinChange+0x7c>
     752:	c3 98       	cbi	0x18, 3	; 24
     754:	08 95       	ret
     756:	8e 30       	cpi	r24, 0x0E	; 14
     758:	91 05       	cpc	r25, r1
     75a:	11 f4       	brne	.+4      	; 0x760 <pinChange+0x86>
     75c:	c4 98       	cbi	0x18, 4	; 24
     75e:	08 95       	ret
     760:	8f 30       	cpi	r24, 0x0F	; 15
     762:	91 05       	cpc	r25, r1
     764:	11 f4       	brne	.+4      	; 0x76a <pinChange+0x90>
     766:	c5 98       	cbi	0x18, 5	; 24
     768:	08 95       	ret
     76a:	80 31       	cpi	r24, 0x10	; 16
     76c:	91 05       	cpc	r25, r1
     76e:	11 f4       	brne	.+4      	; 0x774 <pinChange+0x9a>
     770:	c6 98       	cbi	0x18, 6	; 24
     772:	08 95       	ret
     774:	81 31       	cpi	r24, 0x11	; 17
     776:	91 05       	cpc	r25, r1
     778:	11 f4       	brne	.+4      	; 0x77e <pinChange+0xa4>
     77a:	c7 98       	cbi	0x18, 7	; 24
     77c:	08 95       	ret
     77e:	84 31       	cpi	r24, 0x14	; 20
     780:	91 05       	cpc	r25, r1
     782:	11 f4       	brne	.+4      	; 0x788 <pinChange+0xae>
     784:	a8 98       	cbi	0x15, 0	; 21
     786:	08 95       	ret
     788:	85 31       	cpi	r24, 0x15	; 21
     78a:	91 05       	cpc	r25, r1
     78c:	11 f4       	brne	.+4      	; 0x792 <pinChange+0xb8>
     78e:	a9 98       	cbi	0x15, 1	; 21
     790:	08 95       	ret
     792:	86 31       	cpi	r24, 0x16	; 22
     794:	91 05       	cpc	r25, r1
     796:	11 f4       	brne	.+4      	; 0x79c <pinChange+0xc2>
     798:	aa 98       	cbi	0x15, 2	; 21
     79a:	08 95       	ret
     79c:	87 31       	cpi	r24, 0x17	; 23
     79e:	91 05       	cpc	r25, r1
     7a0:	11 f4       	brne	.+4      	; 0x7a6 <pinChange+0xcc>
     7a2:	ab 98       	cbi	0x15, 3	; 21
     7a4:	08 95       	ret
     7a6:	88 31       	cpi	r24, 0x18	; 24
     7a8:	91 05       	cpc	r25, r1
     7aa:	11 f4       	brne	.+4      	; 0x7b0 <pinChange+0xd6>
     7ac:	ac 98       	cbi	0x15, 4	; 21
     7ae:	08 95       	ret
     7b0:	89 31       	cpi	r24, 0x19	; 25
     7b2:	91 05       	cpc	r25, r1
     7b4:	11 f4       	brne	.+4      	; 0x7ba <pinChange+0xe0>
     7b6:	ad 98       	cbi	0x15, 5	; 21
     7b8:	08 95       	ret
     7ba:	8a 31       	cpi	r24, 0x1A	; 26
     7bc:	91 05       	cpc	r25, r1
     7be:	11 f4       	brne	.+4      	; 0x7c4 <pinChange+0xea>
     7c0:	ae 98       	cbi	0x15, 6	; 21
     7c2:	08 95       	ret
     7c4:	8b 31       	cpi	r24, 0x1B	; 27
     7c6:	91 05       	cpc	r25, r1
     7c8:	11 f4       	brne	.+4      	; 0x7ce <pinChange+0xf4>
     7ca:	af 98       	cbi	0x15, 7	; 21
     7cc:	08 95       	ret
     7ce:	8e 31       	cpi	r24, 0x1E	; 30
     7d0:	91 05       	cpc	r25, r1
     7d2:	11 f4       	brne	.+4      	; 0x7d8 <pinChange+0xfe>
     7d4:	90 98       	cbi	0x12, 0	; 18
     7d6:	08 95       	ret
     7d8:	8f 31       	cpi	r24, 0x1F	; 31
     7da:	91 05       	cpc	r25, r1
     7dc:	11 f4       	brne	.+4      	; 0x7e2 <pinChange+0x108>
     7de:	91 98       	cbi	0x12, 1	; 18
     7e0:	08 95       	ret
     7e2:	80 32       	cpi	r24, 0x20	; 32
     7e4:	91 05       	cpc	r25, r1
     7e6:	11 f4       	brne	.+4      	; 0x7ec <pinChange+0x112>
     7e8:	92 98       	cbi	0x12, 2	; 18
     7ea:	08 95       	ret
     7ec:	81 32       	cpi	r24, 0x21	; 33
     7ee:	91 05       	cpc	r25, r1
     7f0:	11 f4       	brne	.+4      	; 0x7f6 <pinChange+0x11c>
     7f2:	93 98       	cbi	0x12, 3	; 18
     7f4:	08 95       	ret
     7f6:	82 32       	cpi	r24, 0x22	; 34
     7f8:	91 05       	cpc	r25, r1
     7fa:	11 f4       	brne	.+4      	; 0x800 <pinChange+0x126>
     7fc:	94 98       	cbi	0x12, 4	; 18
     7fe:	08 95       	ret
     800:	83 32       	cpi	r24, 0x23	; 35
     802:	91 05       	cpc	r25, r1
     804:	11 f4       	brne	.+4      	; 0x80a <pinChange+0x130>
     806:	95 98       	cbi	0x12, 5	; 18
     808:	08 95       	ret
     80a:	84 32       	cpi	r24, 0x24	; 36
     80c:	91 05       	cpc	r25, r1
     80e:	11 f4       	brne	.+4      	; 0x814 <pinChange+0x13a>
     810:	96 98       	cbi	0x12, 6	; 18
     812:	08 95       	ret
     814:	85 97       	sbiw	r24, 0x25	; 37
     816:	09 f0       	breq	.+2      	; 0x81a <pinChange+0x140>
     818:	9f c0       	rjmp	.+318    	; 0x958 <__stack+0xf9>
     81a:	97 98       	cbi	0x12, 7	; 18
     81c:	08 95       	ret
     81e:	00 97       	sbiw	r24, 0x00	; 0
     820:	11 f4       	brne	.+4      	; 0x826 <pinChange+0x14c>
     822:	d8 9a       	sbi	0x1b, 0	; 27
     824:	08 95       	ret
     826:	81 30       	cpi	r24, 0x01	; 1
     828:	91 05       	cpc	r25, r1
     82a:	11 f4       	brne	.+4      	; 0x830 <pinChange+0x156>
     82c:	d9 9a       	sbi	0x1b, 1	; 27
     82e:	08 95       	ret
     830:	82 30       	cpi	r24, 0x02	; 2
     832:	91 05       	cpc	r25, r1
     834:	11 f4       	brne	.+4      	; 0x83a <pinChange+0x160>
     836:	da 9a       	sbi	0x1b, 2	; 27
     838:	08 95       	ret
     83a:	83 30       	cpi	r24, 0x03	; 3
     83c:	91 05       	cpc	r25, r1
     83e:	11 f4       	brne	.+4      	; 0x844 <pinChange+0x16a>
     840:	db 9a       	sbi	0x1b, 3	; 27
     842:	08 95       	ret
     844:	84 30       	cpi	r24, 0x04	; 4
     846:	91 05       	cpc	r25, r1
     848:	11 f4       	brne	.+4      	; 0x84e <pinChange+0x174>
     84a:	dc 9a       	sbi	0x1b, 4	; 27
     84c:	08 95       	ret
     84e:	85 30       	cpi	r24, 0x05	; 5
     850:	91 05       	cpc	r25, r1
     852:	11 f4       	brne	.+4      	; 0x858 <pinChange+0x17e>
     854:	dd 9a       	sbi	0x1b, 5	; 27
     856:	08 95       	ret
     858:	86 30       	cpi	r24, 0x06	; 6
     85a:	91 05       	cpc	r25, r1
     85c:	11 f4       	brne	.+4      	; 0x862 <__stack+0x3>
     85e:	de 9a       	sbi	0x1b, 6	; 27
     860:	08 95       	ret
     862:	87 30       	cpi	r24, 0x07	; 7
     864:	91 05       	cpc	r25, r1
     866:	11 f4       	brne	.+4      	; 0x86c <__stack+0xd>
     868:	df 9a       	sbi	0x1b, 7	; 27
     86a:	08 95       	ret
     86c:	8a 30       	cpi	r24, 0x0A	; 10
     86e:	91 05       	cpc	r25, r1
     870:	11 f4       	brne	.+4      	; 0x876 <__stack+0x17>
     872:	c0 9a       	sbi	0x18, 0	; 24
     874:	08 95       	ret
     876:	8b 30       	cpi	r24, 0x0B	; 11
     878:	91 05       	cpc	r25, r1
     87a:	11 f4       	brne	.+4      	; 0x880 <__stack+0x21>
     87c:	c1 9a       	sbi	0x18, 1	; 24
     87e:	08 95       	ret
     880:	8c 30       	cpi	r24, 0x0C	; 12
     882:	91 05       	cpc	r25, r1
     884:	11 f4       	brne	.+4      	; 0x88a <__stack+0x2b>
     886:	c2 9a       	sbi	0x18, 2	; 24
     888:	08 95       	ret
     88a:	8d 30       	cpi	r24, 0x0D	; 13
     88c:	91 05       	cpc	r25, r1
     88e:	11 f4       	brne	.+4      	; 0x894 <__stack+0x35>
     890:	c3 9a       	sbi	0x18, 3	; 24
     892:	08 95       	ret
     894:	8e 30       	cpi	r24, 0x0E	; 14
     896:	91 05       	cpc	r25, r1
     898:	11 f4       	brne	.+4      	; 0x89e <__stack+0x3f>
     89a:	c4 9a       	sbi	0x18, 4	; 24
     89c:	08 95       	ret
     89e:	8f 30       	cpi	r24, 0x0F	; 15
     8a0:	91 05       	cpc	r25, r1
     8a2:	11 f4       	brne	.+4      	; 0x8a8 <__stack+0x49>
     8a4:	c5 9a       	sbi	0x18, 5	; 24
     8a6:	08 95       	ret
     8a8:	80 31       	cpi	r24, 0x10	; 16
     8aa:	91 05       	cpc	r25, r1
     8ac:	11 f4       	brne	.+4      	; 0x8b2 <__stack+0x53>
     8ae:	c6 9a       	sbi	0x18, 6	; 24
     8b0:	08 95       	ret
     8b2:	81 31       	cpi	r24, 0x11	; 17
     8b4:	91 05       	cpc	r25, r1
     8b6:	11 f4       	brne	.+4      	; 0x8bc <__stack+0x5d>
     8b8:	c7 9a       	sbi	0x18, 7	; 24
     8ba:	08 95       	ret
     8bc:	84 31       	cpi	r24, 0x14	; 20
     8be:	91 05       	cpc	r25, r1
     8c0:	11 f4       	brne	.+4      	; 0x8c6 <__stack+0x67>
     8c2:	a8 9a       	sbi	0x15, 0	; 21
     8c4:	08 95       	ret
     8c6:	85 31       	cpi	r24, 0x15	; 21
     8c8:	91 05       	cpc	r25, r1
     8ca:	11 f4       	brne	.+4      	; 0x8d0 <__stack+0x71>
     8cc:	a9 9a       	sbi	0x15, 1	; 21
     8ce:	08 95       	ret
     8d0:	86 31       	cpi	r24, 0x16	; 22
     8d2:	91 05       	cpc	r25, r1
     8d4:	11 f4       	brne	.+4      	; 0x8da <__stack+0x7b>
     8d6:	aa 9a       	sbi	0x15, 2	; 21
     8d8:	08 95       	ret
     8da:	87 31       	cpi	r24, 0x17	; 23
     8dc:	91 05       	cpc	r25, r1
     8de:	11 f4       	brne	.+4      	; 0x8e4 <__stack+0x85>
     8e0:	ab 9a       	sbi	0x15, 3	; 21
     8e2:	08 95       	ret
     8e4:	88 31       	cpi	r24, 0x18	; 24
     8e6:	91 05       	cpc	r25, r1
     8e8:	11 f4       	brne	.+4      	; 0x8ee <__stack+0x8f>
     8ea:	ac 9a       	sbi	0x15, 4	; 21
     8ec:	08 95       	ret
     8ee:	89 31       	cpi	r24, 0x19	; 25
     8f0:	91 05       	cpc	r25, r1
     8f2:	11 f4       	brne	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	ad 9a       	sbi	0x15, 5	; 21
     8f6:	08 95       	ret
     8f8:	8a 31       	cpi	r24, 0x1A	; 26
     8fa:	91 05       	cpc	r25, r1
     8fc:	11 f4       	brne	.+4      	; 0x902 <__stack+0xa3>
     8fe:	ae 9a       	sbi	0x15, 6	; 21
     900:	08 95       	ret
     902:	8b 31       	cpi	r24, 0x1B	; 27
     904:	91 05       	cpc	r25, r1
     906:	11 f4       	brne	.+4      	; 0x90c <__stack+0xad>
     908:	af 9a       	sbi	0x15, 7	; 21
     90a:	08 95       	ret
     90c:	8e 31       	cpi	r24, 0x1E	; 30
     90e:	91 05       	cpc	r25, r1
     910:	11 f4       	brne	.+4      	; 0x916 <__stack+0xb7>
     912:	90 9a       	sbi	0x12, 0	; 18
     914:	08 95       	ret
     916:	8f 31       	cpi	r24, 0x1F	; 31
     918:	91 05       	cpc	r25, r1
     91a:	11 f4       	brne	.+4      	; 0x920 <__stack+0xc1>
     91c:	91 9a       	sbi	0x12, 1	; 18
     91e:	08 95       	ret
     920:	80 32       	cpi	r24, 0x20	; 32
     922:	91 05       	cpc	r25, r1
     924:	11 f4       	brne	.+4      	; 0x92a <__stack+0xcb>
     926:	92 9a       	sbi	0x12, 2	; 18
     928:	08 95       	ret
     92a:	81 32       	cpi	r24, 0x21	; 33
     92c:	91 05       	cpc	r25, r1
     92e:	11 f4       	brne	.+4      	; 0x934 <__stack+0xd5>
     930:	93 9a       	sbi	0x12, 3	; 18
     932:	08 95       	ret
     934:	82 32       	cpi	r24, 0x22	; 34
     936:	91 05       	cpc	r25, r1
     938:	11 f4       	brne	.+4      	; 0x93e <__stack+0xdf>
     93a:	94 9a       	sbi	0x12, 4	; 18
     93c:	08 95       	ret
     93e:	83 32       	cpi	r24, 0x23	; 35
     940:	91 05       	cpc	r25, r1
     942:	11 f4       	brne	.+4      	; 0x948 <__stack+0xe9>
     944:	95 9a       	sbi	0x12, 5	; 18
     946:	08 95       	ret
     948:	84 32       	cpi	r24, 0x24	; 36
     94a:	91 05       	cpc	r25, r1
     94c:	11 f4       	brne	.+4      	; 0x952 <__stack+0xf3>
     94e:	96 9a       	sbi	0x12, 6	; 18
     950:	08 95       	ret
     952:	85 97       	sbiw	r24, 0x25	; 37
     954:	09 f4       	brne	.+2      	; 0x958 <__stack+0xf9>
     956:	97 9a       	sbi	0x12, 7	; 18
     958:	08 95       	ret

0000095a <Lcd8_Port>:
     95a:	cf 93       	push	r28
     95c:	c8 2f       	mov	r28, r24
     95e:	80 ff       	sbrs	r24, 0
     960:	07 c0       	rjmp	.+14     	; 0x970 <Lcd8_Port+0x16>
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     96e:	06 c0       	rjmp	.+12     	; 0x97c <Lcd8_Port+0x22>
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	8e e1       	ldi	r24, 0x1E	; 30
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     97c:	c1 ff       	sbrs	r28, 1
     97e:	07 c0       	rjmp	.+14     	; 0x98e <Lcd8_Port+0x34>
     980:	61 e0       	ldi	r22, 0x01	; 1
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	8f e1       	ldi	r24, 0x1F	; 31
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     98c:	06 c0       	rjmp	.+12     	; 0x99a <Lcd8_Port+0x40>
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	8f e1       	ldi	r24, 0x1F	; 31
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     99a:	c2 ff       	sbrs	r28, 2
     99c:	07 c0       	rjmp	.+14     	; 0x9ac <Lcd8_Port+0x52>
     99e:	61 e0       	ldi	r22, 0x01	; 1
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	80 e2       	ldi	r24, 0x20	; 32
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     9aa:	06 c0       	rjmp	.+12     	; 0x9b8 <Lcd8_Port+0x5e>
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	80 e2       	ldi	r24, 0x20	; 32
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     9b8:	c3 ff       	sbrs	r28, 3
     9ba:	07 c0       	rjmp	.+14     	; 0x9ca <Lcd8_Port+0x70>
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	81 e2       	ldi	r24, 0x21	; 33
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     9c8:	06 c0       	rjmp	.+12     	; 0x9d6 <Lcd8_Port+0x7c>
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	81 e2       	ldi	r24, 0x21	; 33
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     9d6:	c4 ff       	sbrs	r28, 4
     9d8:	07 c0       	rjmp	.+14     	; 0x9e8 <Lcd8_Port+0x8e>
     9da:	61 e0       	ldi	r22, 0x01	; 1
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	82 e2       	ldi	r24, 0x22	; 34
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     9e6:	06 c0       	rjmp	.+12     	; 0x9f4 <Lcd8_Port+0x9a>
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	82 e2       	ldi	r24, 0x22	; 34
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     9f4:	c5 ff       	sbrs	r28, 5
     9f6:	07 c0       	rjmp	.+14     	; 0xa06 <Lcd8_Port+0xac>
     9f8:	61 e0       	ldi	r22, 0x01	; 1
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	83 e2       	ldi	r24, 0x23	; 35
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     a04:	06 c0       	rjmp	.+12     	; 0xa12 <Lcd8_Port+0xb8>
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	83 e2       	ldi	r24, 0x23	; 35
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     a12:	c6 ff       	sbrs	r28, 6
     a14:	07 c0       	rjmp	.+14     	; 0xa24 <Lcd8_Port+0xca>
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	84 e2       	ldi	r24, 0x24	; 36
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     a22:	06 c0       	rjmp	.+12     	; 0xa30 <Lcd8_Port+0xd6>
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	84 e2       	ldi	r24, 0x24	; 36
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     a30:	cc 23       	and	r28, r28
     a32:	3c f4       	brge	.+14     	; 0xa42 <Lcd8_Port+0xe8>
     a34:	61 e0       	ldi	r22, 0x01	; 1
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	85 e2       	ldi	r24, 0x25	; 37
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     a40:	06 c0       	rjmp	.+12     	; 0xa4e <Lcd8_Port+0xf4>
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	85 e2       	ldi	r24, 0x25	; 37
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <Lcd8_Cmd>:
     a52:	cf 93       	push	r28
     a54:	c8 2f       	mov	r28, r24
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	8a e1       	ldi	r24, 0x1A	; 26
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     a62:	8c 2f       	mov	r24, r28
     a64:	0e 94 ad 04 	call	0x95a	; 0x95a <Lcd8_Port>
     a68:	61 e0       	ldi	r22, 0x01	; 1
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	8b e1       	ldi	r24, 0x1B	; 27
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     a74:	8f ec       	ldi	r24, 0xCF	; 207
     a76:	97 e0       	ldi	r25, 0x07	; 7
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <Lcd8_Cmd+0x26>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <Lcd8_Cmd+0x2c>
     a7e:	00 00       	nop
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	8b e1       	ldi	r24, 0x1B	; 27
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     a8c:	8f ec       	ldi	r24, 0xCF	; 207
     a8e:	97 e0       	ldi	r25, 0x07	; 7
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	f1 f7       	brne	.-4      	; 0xa90 <Lcd8_Cmd+0x3e>
     a94:	00 c0       	rjmp	.+0      	; 0xa96 <Lcd8_Cmd+0x44>
     a96:	00 00       	nop
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <Lcd8_Clear>:
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd8_Cmd>
     aa2:	08 95       	ret

00000aa4 <Lcd8_Init>:
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	8a e1       	ldi	r24, 0x1A	; 26
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	8b e1       	ldi	r24, 0x1B	; 27
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     abc:	8f e3       	ldi	r24, 0x3F	; 63
     abe:	9c e9       	ldi	r25, 0x9C	; 156
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	f1 f7       	brne	.-4      	; 0xac0 <Lcd8_Init+0x1c>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <Lcd8_Init+0x22>
     ac6:	00 00       	nop
     ac8:	80 e3       	ldi	r24, 0x30	; 48
     aca:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd8_Cmd>
     ace:	8f e0       	ldi	r24, 0x0F	; 15
     ad0:	97 e2       	ldi	r25, 0x27	; 39
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <Lcd8_Init+0x2e>
     ad6:	00 c0       	rjmp	.+0      	; 0xad8 <Lcd8_Init+0x34>
     ad8:	00 00       	nop
     ada:	80 e3       	ldi	r24, 0x30	; 48
     adc:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd8_Cmd>
     ae0:	8f ec       	ldi	r24, 0xCF	; 207
     ae2:	97 e0       	ldi	r25, 0x07	; 7
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	f1 f7       	brne	.-4      	; 0xae4 <Lcd8_Init+0x40>
     ae8:	00 c0       	rjmp	.+0      	; 0xaea <Lcd8_Init+0x46>
     aea:	00 00       	nop
     aec:	80 e3       	ldi	r24, 0x30	; 48
     aee:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd8_Cmd>
     af2:	8f e1       	ldi	r24, 0x1F	; 31
     af4:	9e e4       	ldi	r25, 0x4E	; 78
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <Lcd8_Init+0x52>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <Lcd8_Init+0x58>
     afc:	00 00       	nop
     afe:	88 e3       	ldi	r24, 0x38	; 56
     b00:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd8_Cmd>
     b04:	8c e0       	ldi	r24, 0x0C	; 12
     b06:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd8_Cmd>
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd8_Cmd>
     b10:	86 e0       	ldi	r24, 0x06	; 6
     b12:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd8_Cmd>
     b16:	08 95       	ret

00000b18 <Lcd8_Write_Char>:
     b18:	cf 93       	push	r28
     b1a:	c8 2f       	mov	r28, r24
     b1c:	61 e0       	ldi	r22, 0x01	; 1
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	8a e1       	ldi	r24, 0x1A	; 26
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     b28:	8c 2f       	mov	r24, r28
     b2a:	0e 94 ad 04 	call	0x95a	; 0x95a <Lcd8_Port>
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	8b e1       	ldi	r24, 0x1B	; 27
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     b3a:	8f ec       	ldi	r24, 0xCF	; 207
     b3c:	97 e0       	ldi	r25, 0x07	; 7
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	f1 f7       	brne	.-4      	; 0xb3e <Lcd8_Write_Char+0x26>
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <Lcd8_Write_Char+0x2c>
     b44:	00 00       	nop
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	8b e1       	ldi	r24, 0x1B	; 27
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 6d 03 	call	0x6da	; 0x6da <pinChange>
     b52:	8f ec       	ldi	r24, 0xCF	; 207
     b54:	97 e0       	ldi	r25, 0x07	; 7
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	f1 f7       	brne	.-4      	; 0xb56 <Lcd8_Write_Char+0x3e>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <Lcd8_Write_Char+0x44>
     b5c:	00 00       	nop
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <Lcd8_Write_String>:
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	ec 01       	movw	r28, r24
     b68:	88 81       	ld	r24, Y
     b6a:	88 23       	and	r24, r24
     b6c:	31 f0       	breq	.+12     	; 0xb7a <Lcd8_Write_String+0x18>
     b6e:	21 96       	adiw	r28, 0x01	; 1
     b70:	0e 94 8c 05 	call	0xb18	; 0xb18 <Lcd8_Write_Char>
     b74:	89 91       	ld	r24, Y+
     b76:	81 11       	cpse	r24, r1
     b78:	fb cf       	rjmp	.-10     	; 0xb70 <Lcd8_Write_String+0xe>
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <intLen>:
     b80:	0e 94 c3 10 	call	0x2186	; 0x2186 <__fixsfsi>
     b84:	61 15       	cp	r22, r1
     b86:	71 05       	cpc	r23, r1
     b88:	71 f0       	breq	.+28     	; 0xba6 <intLen+0x26>
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	ea e0       	ldi	r30, 0x0A	; 10
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	2f 5f       	subi	r18, 0xFF	; 255
     b94:	3f 4f       	sbci	r19, 0xFF	; 255
     b96:	cb 01       	movw	r24, r22
     b98:	bf 01       	movw	r22, r30
     b9a:	0e 94 99 12 	call	0x2532	; 0x2532 <__divmodhi4>
     b9e:	61 15       	cp	r22, r1
     ba0:	71 05       	cpc	r23, r1
     ba2:	b9 f7       	brne	.-18     	; 0xb92 <intLen+0x12>
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <intLen+0x2a>
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	c9 01       	movw	r24, r18
     bac:	08 95       	ret

00000bae <intToStr>:
     bae:	cf 92       	push	r12
     bb0:	df 92       	push	r13
     bb2:	ef 92       	push	r14
     bb4:	ff 92       	push	r15
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	ec 01       	movw	r28, r24
     bc0:	8b 01       	movw	r16, r22
     bc2:	bc 01       	movw	r22, r24
     bc4:	99 0f       	add	r25, r25
     bc6:	88 0b       	sbc	r24, r24
     bc8:	99 0b       	sbc	r25, r25
     bca:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
     bce:	0e 94 c0 05 	call	0xb80	; 0xb80 <intLen>
     bd2:	7c 01       	movw	r14, r24
     bd4:	20 97       	sbiw	r28, 0x00	; 0
     bd6:	31 f4       	brne	.+12     	; 0xbe4 <intToStr+0x36>
     bd8:	80 e3       	ldi	r24, 0x30	; 48
     bda:	d8 01       	movw	r26, r16
     bdc:	8c 93       	st	X, r24
     bde:	11 96       	adiw	r26, 0x01	; 1
     be0:	1c 92       	st	X, r1
     be2:	27 c0       	rjmp	.+78     	; 0xc32 <intToStr+0x84>
     be4:	98 01       	movw	r18, r16
     be6:	f8 01       	movw	r30, r16
     be8:	0f 2e       	mov	r0, r31
     bea:	fa e0       	ldi	r31, 0x0A	; 10
     bec:	cf 2e       	mov	r12, r31
     bee:	d1 2c       	mov	r13, r1
     bf0:	f0 2d       	mov	r31, r0
     bf2:	ce 01       	movw	r24, r28
     bf4:	b6 01       	movw	r22, r12
     bf6:	0e 94 99 12 	call	0x2532	; 0x2532 <__divmodhi4>
     bfa:	80 5d       	subi	r24, 0xD0	; 208
     bfc:	81 93       	st	Z+, r24
     bfe:	c6 2f       	mov	r28, r22
     c00:	d7 2f       	mov	r29, r23
     c02:	20 97       	sbiw	r28, 0x00	; 0
     c04:	b1 f7       	brne	.-20     	; 0xbf2 <intToStr+0x44>
     c06:	c7 01       	movw	r24, r14
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	18 16       	cp	r1, r24
     c0c:	19 06       	cpc	r1, r25
     c0e:	8c f4       	brge	.+34     	; 0xc32 <intToStr+0x84>
     c10:	f8 01       	movw	r30, r16
     c12:	ee 0d       	add	r30, r14
     c14:	ff 1d       	adc	r31, r15
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	d9 01       	movw	r26, r18
     c1c:	6c 91       	ld	r22, X
     c1e:	72 91       	ld	r23, -Z
     c20:	7d 93       	st	X+, r23
     c22:	9d 01       	movw	r18, r26
     c24:	60 83       	st	Z, r22
     c26:	4f 5f       	subi	r20, 0xFF	; 255
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	48 17       	cp	r20, r24
     c2e:	59 07       	cpc	r21, r25
     c30:	a4 f3       	brlt	.-24     	; 0xc1a <intToStr+0x6c>
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	df 90       	pop	r13
     c40:	cf 90       	pop	r12
     c42:	08 95       	ret

00000c44 <rowCount>:
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	ec 01       	movw	r28, r24
     c4a:	bc 01       	movw	r22, r24
     c4c:	99 0f       	add	r25, r25
     c4e:	88 0b       	sbc	r24, r24
     c50:	99 0b       	sbc	r25, r25
     c52:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	5e e3       	ldi	r21, 0x3E	; 62
     c5e:	0e 94 08 12 	call	0x2410	; 0x2410 <__mulsf3>
     c62:	0e 94 36 11 	call	0x226c	; 0x226c <floor>
     c66:	0e 94 c3 10 	call	0x2186	; 0x2186 <__fixsfsi>
     c6a:	67 70       	andi	r22, 0x07	; 7
     c6c:	70 78       	andi	r23, 0x80	; 128
     c6e:	77 23       	and	r23, r23
     c70:	34 f4       	brge	.+12     	; 0xc7e <rowCount+0x3a>
     c72:	61 50       	subi	r22, 0x01	; 1
     c74:	71 09       	sbc	r23, r1
     c76:	68 6f       	ori	r22, 0xF8	; 248
     c78:	7f 6f       	ori	r23, 0xFF	; 255
     c7a:	6f 5f       	subi	r22, 0xFF	; 255
     c7c:	7f 4f       	sbci	r23, 0xFF	; 255
     c7e:	86 2f       	mov	r24, r22
     c80:	97 2f       	mov	r25, r23
     c82:	c7 70       	andi	r28, 0x07	; 7
     c84:	dd 27       	eor	r29, r29
     c86:	cd 2b       	or	r28, r29
     c88:	71 f4       	brne	.+28     	; 0xca6 <rowCount+0x62>
     c8a:	69 5f       	subi	r22, 0xF9	; 249
     c8c:	7f 4f       	sbci	r23, 0xFF	; 255
     c8e:	67 70       	andi	r22, 0x07	; 7
     c90:	70 78       	andi	r23, 0x80	; 128
     c92:	77 23       	and	r23, r23
     c94:	34 f4       	brge	.+12     	; 0xca2 <rowCount+0x5e>
     c96:	61 50       	subi	r22, 0x01	; 1
     c98:	71 09       	sbc	r23, r1
     c9a:	68 6f       	ori	r22, 0xF8	; 248
     c9c:	7f 6f       	ori	r23, 0xFF	; 255
     c9e:	6f 5f       	subi	r22, 0xFF	; 255
     ca0:	7f 4f       	sbci	r23, 0xFF	; 255
     ca2:	86 2f       	mov	r24, r22
     ca4:	97 2f       	mov	r25, r23
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	08 95       	ret

00000cac <columnNo>:
     cac:	87 70       	andi	r24, 0x07	; 7
     cae:	90 78       	andi	r25, 0x80	; 128
     cb0:	99 23       	and	r25, r25
     cb2:	24 f4       	brge	.+8      	; 0xcbc <columnNo+0x10>
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	88 6f       	ori	r24, 0xF8	; 248
     cb8:	9f 6f       	ori	r25, 0xFF	; 255
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	07 96       	adiw	r24, 0x07	; 7
     cbe:	87 70       	andi	r24, 0x07	; 7
     cc0:	90 78       	andi	r25, 0x80	; 128
     cc2:	99 23       	and	r25, r25
     cc4:	24 f4       	brge	.+8      	; 0xcce <columnNo+0x22>
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	88 6f       	ori	r24, 0xF8	; 248
     cca:	9f 6f       	ori	r25, 0xFF	; 255
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	87 7f       	andi	r24, 0xF7	; 247
     cd0:	08 95       	ret

00000cd2 <ifSnakePresent>:
     cd2:	40 91 c9 02 	lds	r20, 0x02C9	; 0x8002c9 <wm_sz>
     cd6:	50 91 ca 02 	lds	r21, 0x02CA	; 0x8002ca <wm_sz+0x1>
     cda:	14 16       	cp	r1, r20
     cdc:	15 06       	cpc	r1, r21
     cde:	cc f4       	brge	.+50     	; 0xd12 <ifSnakePresent+0x40>
     ce0:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <snake>
     ce4:	30 91 ec 00 	lds	r19, 0x00EC	; 0x8000ec <snake+0x1>
     ce8:	82 17       	cp	r24, r18
     cea:	93 07       	cpc	r25, r19
     cec:	a9 f0       	breq	.+42     	; 0xd18 <ifSnakePresent+0x46>
     cee:	ed ee       	ldi	r30, 0xED	; 237
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	44 0f       	add	r20, r20
     cf4:	55 1f       	adc	r21, r21
     cf6:	45 51       	subi	r20, 0x15	; 21
     cf8:	5f 4f       	sbci	r21, 0xFF	; 255
     cfa:	05 c0       	rjmp	.+10     	; 0xd06 <ifSnakePresent+0x34>
     cfc:	21 91       	ld	r18, Z+
     cfe:	31 91       	ld	r19, Z+
     d00:	28 17       	cp	r18, r24
     d02:	39 07       	cpc	r19, r25
     d04:	61 f0       	breq	.+24     	; 0xd1e <ifSnakePresent+0x4c>
     d06:	e4 17       	cp	r30, r20
     d08:	f5 07       	cpc	r31, r21
     d0a:	c1 f7       	brne	.-16     	; 0xcfc <ifSnakePresent+0x2a>
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	08 95       	ret
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	08 95       	ret
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	08 95       	ret
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	08 95       	ret

00000d24 <ifBlockPresent>:
     d24:	fc 01       	movw	r30, r24
     d26:	80 81       	ld	r24, Z
     d28:	91 81       	ldd	r25, Z+1	; 0x01
     d2a:	68 17       	cp	r22, r24
     d2c:	79 07       	cpc	r23, r25
     d2e:	99 f0       	breq	.+38     	; 0xd56 <ifBlockPresent+0x32>
     d30:	82 81       	ldd	r24, Z+2	; 0x02
     d32:	93 81       	ldd	r25, Z+3	; 0x03
     d34:	68 17       	cp	r22, r24
     d36:	79 07       	cpc	r23, r25
     d38:	89 f0       	breq	.+34     	; 0xd5c <ifBlockPresent+0x38>
     d3a:	84 81       	ldd	r24, Z+4	; 0x04
     d3c:	95 81       	ldd	r25, Z+5	; 0x05
     d3e:	68 17       	cp	r22, r24
     d40:	79 07       	cpc	r23, r25
     d42:	79 f0       	breq	.+30     	; 0xd62 <ifBlockPresent+0x3e>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	26 81       	ldd	r18, Z+6	; 0x06
     d4a:	37 81       	ldd	r19, Z+7	; 0x07
     d4c:	26 17       	cp	r18, r22
     d4e:	37 07       	cpc	r19, r23
     d50:	51 f0       	breq	.+20     	; 0xd66 <ifBlockPresent+0x42>
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	08 95       	ret
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	08 95       	ret
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	08 95       	ret
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	08 95       	ret

00000d68 <ifObstaclePresent>:
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	ec 01       	movw	r28, r24
     d6e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
     d72:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
     d76:	83 30       	cpi	r24, 0x03	; 3
     d78:	91 05       	cpc	r25, r1
     d7a:	81 f5       	brne	.+96     	; 0xddc <ifObstaclePresent+0x74>
     d7c:	be 01       	movw	r22, r28
     d7e:	8e e9       	ldi	r24, 0x9E	; 158
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 92 06 	call	0xd24	; 0xd24 <ifBlockPresent>
     d86:	89 2b       	or	r24, r25
     d88:	09 f0       	breq	.+2      	; 0xd8c <ifObstaclePresent+0x24>
     d8a:	63 c0       	rjmp	.+198    	; 0xe52 <ifObstaclePresent+0xea>
     d8c:	be 01       	movw	r22, r28
     d8e:	86 e9       	ldi	r24, 0x96	; 150
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 92 06 	call	0xd24	; 0xd24 <ifBlockPresent>
     d96:	89 2b       	or	r24, r25
     d98:	09 f0       	breq	.+2      	; 0xd9c <ifObstaclePresent+0x34>
     d9a:	5b c0       	rjmp	.+182    	; 0xe52 <ifObstaclePresent+0xea>
     d9c:	be 01       	movw	r22, r28
     d9e:	8e e8       	ldi	r24, 0x8E	; 142
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 92 06 	call	0xd24	; 0xd24 <ifBlockPresent>
     da6:	89 2b       	or	r24, r25
     da8:	09 f0       	breq	.+2      	; 0xdac <ifObstaclePresent+0x44>
     daa:	53 c0       	rjmp	.+166    	; 0xe52 <ifObstaclePresent+0xea>
     dac:	be 01       	movw	r22, r28
     dae:	86 e8       	ldi	r24, 0x86	; 134
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 92 06 	call	0xd24	; 0xd24 <ifBlockPresent>
     db6:	89 2b       	or	r24, r25
     db8:	09 f0       	breq	.+2      	; 0xdbc <ifObstaclePresent+0x54>
     dba:	4b c0       	rjmp	.+150    	; 0xe52 <ifObstaclePresent+0xea>
     dbc:	be 01       	movw	r22, r28
     dbe:	8e e7       	ldi	r24, 0x7E	; 126
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 92 06 	call	0xd24	; 0xd24 <ifBlockPresent>
     dc6:	89 2b       	or	r24, r25
     dc8:	09 f0       	breq	.+2      	; 0xdcc <ifObstaclePresent+0x64>
     dca:	43 c0       	rjmp	.+134    	; 0xe52 <ifObstaclePresent+0xea>
     dcc:	be 01       	movw	r22, r28
     dce:	86 e7       	ldi	r24, 0x76	; 118
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 92 06 	call	0xd24	; 0xd24 <ifBlockPresent>
     dd6:	89 2b       	or	r24, r25
     dd8:	e1 f5       	brne	.+120    	; 0xe52 <ifObstaclePresent+0xea>
     dda:	3a c0       	rjmp	.+116    	; 0xe50 <ifObstaclePresent+0xe8>
     ddc:	04 97       	sbiw	r24, 0x04	; 4
     dde:	c1 f5       	brne	.+112    	; 0xe50 <ifObstaclePresent+0xe8>
     de0:	be 01       	movw	r22, r28
     de2:	8e e9       	ldi	r24, 0x9E	; 158
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 92 06 	call	0xd24	; 0xd24 <ifBlockPresent>
     dea:	89 2b       	or	r24, r25
     dec:	91 f5       	brne	.+100    	; 0xe52 <ifObstaclePresent+0xea>
     dee:	be 01       	movw	r22, r28
     df0:	86 e9       	ldi	r24, 0x96	; 150
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 92 06 	call	0xd24	; 0xd24 <ifBlockPresent>
     df8:	89 2b       	or	r24, r25
     dfa:	59 f5       	brne	.+86     	; 0xe52 <ifObstaclePresent+0xea>
     dfc:	be 01       	movw	r22, r28
     dfe:	8e e8       	ldi	r24, 0x8E	; 142
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 92 06 	call	0xd24	; 0xd24 <ifBlockPresent>
     e06:	89 2b       	or	r24, r25
     e08:	21 f5       	brne	.+72     	; 0xe52 <ifObstaclePresent+0xea>
     e0a:	be 01       	movw	r22, r28
     e0c:	86 e8       	ldi	r24, 0x86	; 134
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 92 06 	call	0xd24	; 0xd24 <ifBlockPresent>
     e14:	89 2b       	or	r24, r25
     e16:	e9 f4       	brne	.+58     	; 0xe52 <ifObstaclePresent+0xea>
     e18:	be 01       	movw	r22, r28
     e1a:	8e e7       	ldi	r24, 0x7E	; 126
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 92 06 	call	0xd24	; 0xd24 <ifBlockPresent>
     e22:	89 2b       	or	r24, r25
     e24:	b1 f4       	brne	.+44     	; 0xe52 <ifObstaclePresent+0xea>
     e26:	be 01       	movw	r22, r28
     e28:	86 e7       	ldi	r24, 0x76	; 118
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 92 06 	call	0xd24	; 0xd24 <ifBlockPresent>
     e30:	89 2b       	or	r24, r25
     e32:	79 f4       	brne	.+30     	; 0xe52 <ifObstaclePresent+0xea>
     e34:	be 01       	movw	r22, r28
     e36:	8e e6       	ldi	r24, 0x6E	; 110
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 92 06 	call	0xd24	; 0xd24 <ifBlockPresent>
     e3e:	89 2b       	or	r24, r25
     e40:	41 f4       	brne	.+16     	; 0xe52 <ifObstaclePresent+0xea>
     e42:	be 01       	movw	r22, r28
     e44:	86 e6       	ldi	r24, 0x66	; 102
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 92 06 	call	0xd24	; 0xd24 <ifBlockPresent>
     e4c:	89 2b       	or	r24, r25
     e4e:	09 f4       	brne	.+2      	; 0xe52 <ifObstaclePresent+0xea>
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <ifObstaclePresent+0xee>
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	08 95       	ret

00000e5c <showBlock>:
     e5c:	af 92       	push	r10
     e5e:	bf 92       	push	r11
     e60:	cf 92       	push	r12
     e62:	df 92       	push	r13
     e64:	ef 92       	push	r14
     e66:	ff 92       	push	r15
     e68:	0f 93       	push	r16
     e6a:	1f 93       	push	r17
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	7c 01       	movw	r14, r24
     e72:	6c 01       	movw	r12, r24
     e74:	88 e0       	ldi	r24, 0x08	; 8
     e76:	c8 0e       	add	r12, r24
     e78:	d1 1c       	adc	r13, r1
     e7a:	f7 01       	movw	r30, r14
     e7c:	a1 90       	ld	r10, Z+
     e7e:	b1 90       	ld	r11, Z+
     e80:	7f 01       	movw	r14, r30
     e82:	c5 01       	movw	r24, r10
     e84:	0e 94 22 06 	call	0xc44	; 0xc44 <rowCount>
     e88:	8c 01       	movw	r16, r24
     e8a:	c5 01       	movw	r24, r10
     e8c:	0e 94 56 06 	call	0xcac	; 0xcac <columnNo>
     e90:	ec 01       	movw	r28, r24
     e92:	b5 01       	movw	r22, r10
     e94:	bb 0c       	add	r11, r11
     e96:	88 0b       	sbc	r24, r24
     e98:	99 0b       	sbc	r25, r25
     e9a:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e8       	ldi	r20, 0x80	; 128
     ea4:	5c e3       	ldi	r21, 0x3C	; 60
     ea6:	0e 94 08 12 	call	0x2410	; 0x2410 <__mulsf3>
     eaa:	0e 94 35 10 	call	0x206a	; 0x206a <ceil>
     eae:	0e 94 c3 10 	call	0x2186	; 0x2186 <__fixsfsi>
     eb2:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__data_end>
     eb6:	61 30       	cpi	r22, 0x01	; 1
     eb8:	71 05       	cpc	r23, r1
     eba:	09 f1       	breq	.+66     	; 0xefe <showBlock+0xa2>
     ebc:	63 30       	cpi	r22, 0x03	; 3
     ebe:	71 05       	cpc	r23, r1
     ec0:	b9 f0       	breq	.+46     	; 0xef0 <showBlock+0x94>
     ec2:	cc 0f       	add	r28, r28
     ec4:	dd 1f       	adc	r29, r29
     ec6:	cc 0f       	add	r28, r28
     ec8:	dd 1f       	adc	r29, r29
     eca:	c2 2b       	or	r28, r18
     ecc:	c2 62       	ori	r28, 0x22	; 34
     ece:	63 50       	subi	r22, 0x03	; 3
     ed0:	71 09       	sbc	r23, r1
     ed2:	62 30       	cpi	r22, 0x02	; 2
     ed4:	71 05       	cpc	r23, r1
     ed6:	08 f4       	brcc	.+2      	; 0xeda <showBlock+0x7e>
     ed8:	21 60       	ori	r18, 0x01	; 1
     eda:	00 0f       	add	r16, r16
     edc:	11 1f       	adc	r17, r17
     ede:	00 0f       	add	r16, r16
     ee0:	11 1f       	adc	r17, r17
     ee2:	02 2b       	or	r16, r18
     ee4:	0b bb       	out	0x1b, r16	; 27
     ee6:	c8 bb       	out	0x18, r28	; 24
     ee8:	ec 14       	cp	r14, r12
     eea:	fd 04       	cpc	r15, r13
     eec:	31 f6       	brne	.-116    	; 0xe7a <showBlock+0x1e>
     eee:	0e c0       	rjmp	.+28     	; 0xf0c <showBlock+0xb0>
     ef0:	cc 0f       	add	r28, r28
     ef2:	dd 1f       	adc	r29, r29
     ef4:	cc 0f       	add	r28, r28
     ef6:	dd 1f       	adc	r29, r29
     ef8:	c2 2b       	or	r28, r18
     efa:	c0 62       	ori	r28, 0x20	; 32
     efc:	ed cf       	rjmp	.-38     	; 0xed8 <showBlock+0x7c>
     efe:	cc 0f       	add	r28, r28
     f00:	dd 1f       	adc	r29, r29
     f02:	cc 0f       	add	r28, r28
     f04:	dd 1f       	adc	r29, r29
     f06:	c2 2b       	or	r28, r18
     f08:	c0 62       	ori	r28, 0x20	; 32
     f0a:	e7 cf       	rjmp	.-50     	; 0xeda <showBlock+0x7e>
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	bf 90       	pop	r11
     f1e:	af 90       	pop	r10
     f20:	08 95       	ret

00000f22 <showThirdLevel>:
     f22:	8e e9       	ldi	r24, 0x9E	; 158
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 2e 07 	call	0xe5c	; 0xe5c <showBlock>
     f2a:	86 e9       	ldi	r24, 0x96	; 150
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 2e 07 	call	0xe5c	; 0xe5c <showBlock>
     f32:	8e e8       	ldi	r24, 0x8E	; 142
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 2e 07 	call	0xe5c	; 0xe5c <showBlock>
     f3a:	86 e8       	ldi	r24, 0x86	; 134
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 2e 07 	call	0xe5c	; 0xe5c <showBlock>
     f42:	8e e7       	ldi	r24, 0x7E	; 126
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 2e 07 	call	0xe5c	; 0xe5c <showBlock>
     f4a:	86 e7       	ldi	r24, 0x76	; 118
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 2e 07 	call	0xe5c	; 0xe5c <showBlock>
     f52:	08 95       	ret

00000f54 <showFourthLevel>:
     f54:	0e 94 91 07 	call	0xf22	; 0xf22 <showThirdLevel>
     f58:	8e e6       	ldi	r24, 0x6E	; 110
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <showBlock>
     f60:	86 e6       	ldi	r24, 0x66	; 102
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 2e 07 	call	0xe5c	; 0xe5c <showBlock>
     f68:	08 95       	ret

00000f6a <position>:
     f6a:	8f 92       	push	r8
     f6c:	9f 92       	push	r9
     f6e:	af 92       	push	r10
     f70:	bf 92       	push	r11
     f72:	cf 92       	push	r12
     f74:	df 92       	push	r13
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	6c 01       	movw	r12, r24
     f82:	f0 90 d0 00 	lds	r15, 0x00D0	; 0x8000d0 <__data_end>
     f86:	cf 2d       	mov	r28, r15
     f88:	d0 e0       	ldi	r29, 0x00	; 0
     f8a:	fc 01       	movw	r30, r24
     f8c:	ee 0f       	add	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	e5 51       	subi	r30, 0x15	; 21
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	00 81       	ld	r16, Z
     f96:	11 81       	ldd	r17, Z+1	; 0x01
     f98:	b8 01       	movw	r22, r16
     f9a:	01 2e       	mov	r0, r17
     f9c:	00 0c       	add	r0, r0
     f9e:	88 0b       	sbc	r24, r24
     fa0:	99 0b       	sbc	r25, r25
     fa2:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e8       	ldi	r20, 0x80	; 128
     fac:	5c e3       	ldi	r21, 0x3C	; 60
     fae:	0e 94 08 12 	call	0x2410	; 0x2410 <__mulsf3>
     fb2:	0e 94 35 10 	call	0x206a	; 0x206a <ceil>
     fb6:	0e 94 c3 10 	call	0x2186	; 0x2186 <__fixsfsi>
     fba:	4b 01       	movw	r8, r22
     fbc:	5c 01       	movw	r10, r24
     fbe:	c0 fc       	sbrc	r12, 0
     fc0:	05 c0       	rjmp	.+10     	; 0xfcc <position+0x62>
     fc2:	8f 2d       	mov	r24, r15
     fc4:	80 62       	ori	r24, 0x20	; 32
     fc6:	c8 2e       	mov	r12, r24
     fc8:	d1 2c       	mov	r13, r1
     fca:	01 c0       	rjmp	.+2      	; 0xfce <position+0x64>
     fcc:	6e 01       	movw	r12, r28
     fce:	c8 01       	movw	r24, r16
     fd0:	8f 77       	andi	r24, 0x7F	; 127
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	80 34       	cpi	r24, 0x40	; 64
     fd6:	91 05       	cpc	r25, r1
     fd8:	10 f0       	brcs	.+4      	; 0xfde <position+0x74>
     fda:	68 94       	set
     fdc:	c1 f8       	bld	r12, 1
     fde:	c8 01       	movw	r24, r16
     fe0:	0e 94 56 06 	call	0xcac	; 0xcac <columnNo>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	c8 2a       	or	r12, r24
     fee:	d9 2a       	or	r13, r25
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	88 1a       	sub	r8, r24
     ff4:	91 08       	sbc	r9, r1
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	88 16       	cp	r8, r24
     ffa:	91 04       	cpc	r9, r1
     ffc:	18 f0       	brcs	.+6      	; 0x1004 <position+0x9a>
     ffe:	cf 2d       	mov	r28, r15
    1000:	c1 60       	ori	r28, 0x01	; 1
    1002:	d0 e0       	ldi	r29, 0x00	; 0
    1004:	c8 01       	movw	r24, r16
    1006:	0e 94 22 06 	call	0xc44	; 0xc44 <rowCount>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	c8 2b       	or	r28, r24
    1014:	d9 2b       	or	r29, r25
    1016:	cb bb       	out	0x1b, r28	; 27
    1018:	c8 ba       	out	0x18, r12	; 24
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	ff 90       	pop	r15
    1024:	df 90       	pop	r13
    1026:	cf 90       	pop	r12
    1028:	bf 90       	pop	r11
    102a:	af 90       	pop	r10
    102c:	9f 90       	pop	r9
    102e:	8f 90       	pop	r8
    1030:	08 95       	ret

00001032 <seedPosition>:
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	7c 01       	movw	r14, r24
    1040:	0e 94 22 06 	call	0xc44	; 0xc44 <rowCount>
    1044:	8c 01       	movw	r16, r24
    1046:	c7 01       	movw	r24, r14
    1048:	0e 94 56 06 	call	0xcac	; 0xcac <columnNo>
    104c:	ec 01       	movw	r28, r24
    104e:	b7 01       	movw	r22, r14
    1050:	ff 0c       	add	r15, r15
    1052:	88 0b       	sbc	r24, r24
    1054:	99 0b       	sbc	r25, r25
    1056:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e8       	ldi	r20, 0x80	; 128
    1060:	5c e3       	ldi	r21, 0x3C	; 60
    1062:	0e 94 08 12 	call	0x2410	; 0x2410 <__mulsf3>
    1066:	0e 94 35 10 	call	0x206a	; 0x206a <ceil>
    106a:	0e 94 c3 10 	call	0x2186	; 0x2186 <__fixsfsi>
    106e:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__data_end>
    1072:	e2 2f       	mov	r30, r18
    1074:	e1 60       	ori	r30, 0x01	; 1
    1076:	62 30       	cpi	r22, 0x02	; 2
    1078:	71 05       	cpc	r23, r1
    107a:	19 f0       	breq	.+6      	; 0x1082 <seedPosition+0x50>
    107c:	64 30       	cpi	r22, 0x04	; 4
    107e:	71 05       	cpc	r23, r1
    1080:	19 f4       	brne	.+6      	; 0x1088 <seedPosition+0x56>
    1082:	32 2f       	mov	r19, r18
    1084:	31 62       	ori	r19, 0x21	; 33
    1086:	01 c0       	rjmp	.+2      	; 0x108a <seedPosition+0x58>
    1088:	3e 2f       	mov	r19, r30
    108a:	cc 0f       	add	r28, r28
    108c:	dd 1f       	adc	r29, r29
    108e:	cc 0f       	add	r28, r28
    1090:	dd 1f       	adc	r29, r29
    1092:	c3 2b       	or	r28, r19
    1094:	63 50       	subi	r22, 0x03	; 3
    1096:	71 09       	sbc	r23, r1
    1098:	62 30       	cpi	r22, 0x02	; 2
    109a:	71 05       	cpc	r23, r1
    109c:	08 f4       	brcc	.+2      	; 0x10a0 <seedPosition+0x6e>
    109e:	2e 2f       	mov	r18, r30
    10a0:	00 0f       	add	r16, r16
    10a2:	11 1f       	adc	r17, r17
    10a4:	00 0f       	add	r16, r16
    10a6:	11 1f       	adc	r17, r17
    10a8:	02 2b       	or	r16, r18
    10aa:	0b bb       	out	0x1b, r16	; 27
    10ac:	c8 bb       	out	0x18, r28	; 24
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	08 95       	ret

000010bc <showScreen>:

void showScreen()
{
	Lcd8_Write_String("Game On");
    10bc:	86 ea       	ldi	r24, 0xA6	; 166
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 b1 05 	call	0xb62	; 0xb62 <Lcd8_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10c4:	2f ef       	ldi	r18, 0xFF	; 255
    10c6:	84 e3       	ldi	r24, 0x34	; 52
    10c8:	9c e0       	ldi	r25, 0x0C	; 12
    10ca:	21 50       	subi	r18, 0x01	; 1
    10cc:	80 40       	sbci	r24, 0x00	; 0
    10ce:	90 40       	sbci	r25, 0x00	; 0
    10d0:	e1 f7       	brne	.-8      	; 0x10ca <showScreen+0xe>
    10d2:	00 c0       	rjmp	.+0      	; 0x10d4 <showScreen+0x18>
    10d4:	00 00       	nop
	_delay_ms(500);
	Lcd8_Clear();
    10d6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd8_Clear>
}

void Lcd8_Set_Cursor(char a, char b)
{
	if(a == 1)
	Lcd8_Cmd(0x80 + b);
    10da:	81 e8       	ldi	r24, 0x81	; 129
    10dc:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd8_Cmd>
	Lcd8_Set_Cursor(1,1);
	Lcd8_Write_String("Level: ");
    10e0:	8e ea       	ldi	r24, 0xAE	; 174
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 b1 05 	call	0xb62	; 0xb62 <Lcd8_Write_String>
    10e8:	88 e8       	ldi	r24, 0x88	; 136
    10ea:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd8_Cmd>
	Lcd8_Set_Cursor(1,8);
	intToStr(level,scr);
    10ee:	69 ef       	ldi	r22, 0xF9	; 249
    10f0:	71 e0       	ldi	r23, 0x01	; 1
    10f2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    10f6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    10fa:	0e 94 d7 05 	call	0xbae	; 0xbae <intToStr>
	Lcd8_Write_String(scr);
    10fe:	89 ef       	ldi	r24, 0xF9	; 249
    1100:	91 e0       	ldi	r25, 0x01	; 1
    1102:	0e 94 b1 05 	call	0xb62	; 0xb62 <Lcd8_Write_String>
	else if(a == 2)
	Lcd8_Cmd(0xC0 + b);
    1106:	81 ec       	ldi	r24, 0xC1	; 193
    1108:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd8_Cmd>
	Lcd8_Set_Cursor(2,1);
	Lcd8_Write_String("Score: ");
    110c:	86 eb       	ldi	r24, 0xB6	; 182
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 b1 05 	call	0xb62	; 0xb62 <Lcd8_Write_String>
    1114:	88 ec       	ldi	r24, 0xC8	; 200
    1116:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd8_Cmd>
	Lcd8_Set_Cursor(2,8);
	intToStr(score,scr);
    111a:	69 ef       	ldi	r22, 0xF9	; 249
    111c:	71 e0       	ldi	r23, 0x01	; 1
    111e:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <score>
    1122:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <score+0x1>
    1126:	0e 94 d7 05 	call	0xbae	; 0xbae <intToStr>
	Lcd8_Write_String(scr);
    112a:	89 ef       	ldi	r24, 0xF9	; 249
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	0e 94 b1 05 	call	0xb62	; 0xb62 <Lcd8_Write_String>
    1132:	08 95       	ret

00001134 <initialize>:
	
}

void initialize(){
	//setting up level
	srand(time(0));
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 49 00 	call	0x92	; 0x92 <time>
    113c:	0e 94 12 13 	call	0x2624	; 0x2624 <srand>
	
	if(level == -1){
    1140:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    1144:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    1148:	8f 3f       	cpi	r24, 0xFF	; 255
    114a:	2f ef       	ldi	r18, 0xFF	; 255
    114c:	92 07       	cpc	r25, r18
    114e:	99 f4       	brne	.+38     	; 0x1176 <initialize+0x42>
		//srand(time(0));
	DDRA = 0xFF;
    1150:	8f ef       	ldi	r24, 0xFF	; 255
    1152:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
    1154:	84 bb       	out	0x14, r24	; 20
	DDRB = 0xFF;
    1156:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
    1158:	81 bb       	out	0x11, r24	; 17
	level = 1;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <level+0x1>
    1162:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <level>
	Lcd8_Init();
    1166:	0e 94 52 05 	call	0xaa4	; 0xaa4 <Lcd8_Init>
}

void Lcd8_Set_Cursor(char a, char b)
{
	if(a == 1)
	Lcd8_Cmd(0x80 + b);
    116a:	81 e8       	ldi	r24, 0x81	; 129
    116c:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd8_Cmd>
	Lcd8_Set_Cursor(1,1);
	showScreen();
    1170:	0e 94 5e 08 	call	0x10bc	; 0x10bc <showScreen>
    1174:	1b c0       	rjmp	.+54     	; 0x11ac <initialize+0x78>
	}
	
	else
	{
		level++;
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <level+0x1>
    117c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <level>
    1180:	88 e8       	ldi	r24, 0x88	; 136
    1182:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd8_Cmd>
		Lcd8_Set_Cursor(1,8);
		intToStr(level,scr);
    1186:	69 ef       	ldi	r22, 0xF9	; 249
    1188:	71 e0       	ldi	r23, 0x01	; 1
    118a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    118e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    1192:	0e 94 d7 05 	call	0xbae	; 0xbae <intToStr>
		Lcd8_Write_String(scr);
    1196:	89 ef       	ldi	r24, 0xF9	; 249
    1198:	91 e0       	ldi	r25, 0x01	; 1
    119a:	0e 94 b1 05 	call	0xb62	; 0xb62 <Lcd8_Write_String>
	else if(a == 2)
	Lcd8_Cmd(0xC0 + b);
    119e:	88 ec       	ldi	r24, 0xC8	; 200
    11a0:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd8_Cmd>
		Lcd8_Set_Cursor(2,8);
		Lcd8_Write_String("0");	
    11a4:	8e eb       	ldi	r24, 0xBE	; 190
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 94 b1 05 	call	0xb62	; 0xb62 <Lcd8_Write_String>
	}
	
	
	PORTA = 0x00;
    11ac:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0xFF;
    11ae:	8f ef       	ldi	r24, 0xFF	; 255
    11b0:	88 bb       	out	0x18, r24	; 24
	//PORTB = 0x00;
	
	//setting up speed
	if(level == 1)
    11b2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    11b6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	91 05       	cpc	r25, r1
    11be:	69 f4       	brne	.+26     	; 0x11da <initialize+0xa6>
	iteration = slowerIteration;
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a6 e9       	ldi	r26, 0x96	; 150
    11c6:	b3 e4       	ldi	r27, 0x43	; 67
    11c8:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <iteration>
    11cc:	90 93 d2 00 	sts	0x00D2, r25	; 0x8000d2 <iteration+0x1>
    11d0:	a0 93 d3 00 	sts	0x00D3, r26	; 0x8000d3 <iteration+0x2>
    11d4:	b0 93 d4 00 	sts	0x00D4, r27	; 0x8000d4 <iteration+0x3>
    11d8:	11 c0       	rjmp	.+34     	; 0x11fc <initialize+0xc8>
	else if (level < 5)
    11da:	05 97       	sbiw	r24, 0x05	; 5
    11dc:	6c f4       	brge	.+26     	; 0x11f8 <initialize+0xc4>
	{
		iteration = fasterIteration;
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	a0 ef       	ldi	r26, 0xF0	; 240
    11e4:	b2 e4       	ldi	r27, 0x42	; 66
    11e6:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <iteration>
    11ea:	90 93 d2 00 	sts	0x00D2, r25	; 0x8000d2 <iteration+0x1>
    11ee:	a0 93 d3 00 	sts	0x00D3, r26	; 0x8000d3 <iteration+0x2>
    11f2:	b0 93 d4 00 	sts	0x00D4, r27	; 0x8000d4 <iteration+0x3>
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <initialize+0xc8>
				
	}
		
	
	else
	Die();
    11f8:	0e 94 46 09 	call	0x128c	; 0x128c <Die>
	
	//for a new level, reset the score
	score = 0;
    11fc:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <score+0x1>
    1200:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <score>
	
	int i;
	sss=0;
    1204:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <sss+0x1>
    1208:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <sss>
	seed = (rand()%256)+1;
    120c:	0e 94 0d 13 	call	0x261a	; 0x261a <rand>
    1210:	90 78       	andi	r25, 0x80	; 128
    1212:	99 23       	and	r25, r25
    1214:	1c f4       	brge	.+6      	; 0x121c <initialize+0xe8>
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	9f 6f       	ori	r25, 0xFF	; 255
    121a:	01 96       	adiw	r24, 0x01	; 1
    121c:	9c 01       	movw	r18, r24
    121e:	2f 5f       	subi	r18, 0xFF	; 255
    1220:	3f 4f       	sbci	r19, 0xFF	; 255
	if(seed==256) seed--;
    1222:	21 15       	cp	r18, r1
    1224:	41 e0       	ldi	r20, 0x01	; 1
    1226:	34 07       	cpc	r19, r20
    1228:	29 f0       	breq	.+10     	; 0x1234 <initialize+0x100>
	//for a new level, reset the score
	score = 0;
	
	int i;
	sss=0;
	seed = (rand()%256)+1;
    122a:	30 93 e2 02 	sts	0x02E2, r19	; 0x8002e2 <seed+0x1>
    122e:	20 93 e1 02 	sts	0x02E1, r18	; 0x8002e1 <seed>
    1232:	04 c0       	rjmp	.+8      	; 0x123c <initialize+0x108>
	if(seed==256) seed--;
    1234:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <seed+0x1>
    1238:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <seed>
	status=1;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <status+0x1>
    1244:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <status>
	pos=2;
    1248:	22 e0       	ldi	r18, 0x02	; 2
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	30 93 f4 01 	sts	0x01F4, r19	; 0x8001f4 <pos+0x1>
    1250:	20 93 f3 01 	sts	0x01F3, r18	; 0x8001f3 <pos>
	whichMatrix = 0; //start from 0th matrix
    1254:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <whichMatrix+0x1>
    1258:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <whichMatrix>
	wm_sz=3;
    125c:	23 e0       	ldi	r18, 0x03	; 3
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	30 93 ca 02 	sts	0x02CA, r19	; 0x8002ca <wm_sz+0x1>
    1264:	20 93 c9 02 	sts	0x02C9, r18	; 0x8002c9 <wm_sz>
	moveDir = rightDir;
    1268:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <moveDir+0x1>
    126c:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <moveDir>
    1270:	eb ee       	ldi	r30, 0xEB	; 235
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	8b e6       	ldi	r24, 0x6B	; 107
    1276:	91 e0       	ldi	r25, 0x01	; 1
	for(i=0;i<64;i++){
		snake[i]=0;
    1278:	11 92       	st	Z+, r1
    127a:	11 92       	st	Z+, r1
	status=1;
	pos=2;
	whichMatrix = 0; //start from 0th matrix
	wm_sz=3;
	moveDir = rightDir;
	for(i=0;i<64;i++){
    127c:	e8 17       	cp	r30, r24
    127e:	f9 07       	cpc	r31, r25
    1280:	d9 f7       	brne	.-10     	; 0x1278 <initialize+0x144>
	}
	
	
	
	
	I2C_Init();		// Initialize I2C
    1282:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2C_Init>
	Gyro_Init();		// Initialize Gyro */
    1286:	0e 94 c0 00 	call	0x180	; 0x180 <Gyro_Init>
    128a:	08 95       	ret

0000128c <Die>:
}


void Die()
{
	PORTA = 0x00;
    128c:	1b ba       	out	0x1b, r1	; 27
	PORTD = 0xFF;
    128e:	8f ef       	ldi	r24, 0xFF	; 255
    1290:	82 bb       	out	0x12, r24	; 18
	PORTB = 0XFF;
    1292:	88 bb       	out	0x18, r24	; 24
}

void Lcd8_Set_Cursor(char a, char b)
{
	if(a == 1)
	Lcd8_Cmd(0x80 + b);
    1294:	81 e8       	ldi	r24, 0x81	; 129
    1296:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd8_Cmd>
	Lcd8_Set_Cursor(1,1);
	Lcd8_Write_String("    ");
    129a:	80 ec       	ldi	r24, 0xC0	; 192
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 b1 05 	call	0xb62	; 0xb62 <Lcd8_Write_String>
    12a2:	85 e8       	ldi	r24, 0x85	; 133
    12a4:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd8_Cmd>
	
	Lcd8_Set_Cursor(1,5);
	Lcd8_Write_String("Game over!");
    12a8:	85 ec       	ldi	r24, 0xC5	; 197
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	0e 94 b1 05 	call	0xb62	; 0xb62 <Lcd8_Write_String>
    12b0:	2f ef       	ldi	r18, 0xFF	; 255
    12b2:	89 e6       	ldi	r24, 0x69	; 105
    12b4:	98 e1       	ldi	r25, 0x18	; 24
    12b6:	21 50       	subi	r18, 0x01	; 1
    12b8:	80 40       	sbci	r24, 0x00	; 0
    12ba:	90 40       	sbci	r25, 0x00	; 0
    12bc:	e1 f7       	brne	.-8      	; 0x12b6 <Die+0x2a>
    12be:	00 c0       	rjmp	.+0      	; 0x12c0 <Die+0x34>
    12c0:	00 00       	nop
	_delay_ms(1000);
	Lcd8_Clear();
    12c2:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Lcd8_Clear>
	//PORTB = 0x00;
	
	score = 0;
    12c6:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <score+0x1>
    12ca:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <score>
	level = -1;
    12ce:	8f ef       	ldi	r24, 0xFF	; 255
    12d0:	9f ef       	ldi	r25, 0xFF	; 255
    12d2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <level+0x1>
    12d6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <level>
	initialize();
    12da:	0e 94 9a 08 	call	0x1134	; 0x1134 <initialize>
    12de:	08 95       	ret

000012e0 <shift>:
	}
}


void shift()
{
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
	int i;

	for(i=wm_sz-1;i>0;i--)
    12e8:	e0 91 c9 02 	lds	r30, 0x02C9	; 0x8002c9 <wm_sz>
    12ec:	f0 91 ca 02 	lds	r31, 0x02CA	; 0x8002ca <wm_sz+0x1>
    12f0:	cf 01       	movw	r24, r30
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	18 16       	cp	r1, r24
    12f6:	19 06       	cpc	r1, r25
    12f8:	6c f4       	brge	.+26     	; 0x1314 <shift+0x34>
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	e7 51       	subi	r30, 0x17	; 23
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	2b ee       	ldi	r18, 0xEB	; 235
    1304:	30 e0       	ldi	r19, 0x00	; 0
	{
		snake[i]=snake[i-1];
    1306:	92 91       	ld	r25, -Z
    1308:	82 91       	ld	r24, -Z
    130a:	93 83       	std	Z+3, r25	; 0x03
    130c:	82 83       	std	Z+2, r24	; 0x02

void shift()
{
	int i;

	for(i=wm_sz-1;i>0;i--)
    130e:	e2 17       	cp	r30, r18
    1310:	f3 07       	cpc	r31, r19
    1312:	c9 f7       	brne	.-14     	; 0x1306 <shift+0x26>
	{
		snake[i]=snake[i-1];
	}
	snake[0]=pos;
    1314:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <pos>
    1318:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <pos+0x1>
    131c:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <snake+0x1>
    1320:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <snake>
	
	if( level > 2 && ifObstaclePresent(snake[0]))
    1324:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <level>
    1328:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <level+0x1>
    132c:	23 30       	cpi	r18, 0x03	; 3
    132e:	31 05       	cpc	r19, r1
    1330:	34 f0       	brlt	.+12     	; 0x133e <shift+0x5e>
    1332:	0e 94 b4 06 	call	0xd68	; 0xd68 <ifObstaclePresent>
    1336:	89 2b       	or	r24, r25
    1338:	11 f0       	breq	.+4      	; 0x133e <shift+0x5e>
	{
		Die();	
    133a:	0e 94 46 09 	call	0x128c	; 0x128c <Die>
	}
	
	for(i=2;i<wm_sz;i++)
    133e:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    1342:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    1346:	03 97       	sbiw	r24, 0x03	; 3
    1348:	cc f0       	brlt	.+50     	; 0x137c <shift+0x9c>
    134a:	0f ee       	ldi	r16, 0xEF	; 239
    134c:	10 e0       	ldi	r17, 0x00	; 0
    134e:	c2 e0       	ldi	r28, 0x02	; 2
    1350:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(snake[i]==pos)
    1352:	f8 01       	movw	r30, r16
    1354:	21 91       	ld	r18, Z+
    1356:	31 91       	ld	r19, Z+
    1358:	8f 01       	movw	r16, r30
    135a:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <pos>
    135e:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <pos+0x1>
    1362:	28 17       	cp	r18, r24
    1364:	39 07       	cpc	r19, r25
    1366:	11 f4       	brne	.+4      	; 0x136c <shift+0x8c>
		{
			Die();
    1368:	0e 94 46 09 	call	0x128c	; 0x128c <Die>
	if( level > 2 && ifObstaclePresent(snake[0]))
	{
		Die();	
	}
	
	for(i=2;i<wm_sz;i++)
    136c:	21 96       	adiw	r28, 0x01	; 1
    136e:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    1372:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    1376:	c8 17       	cp	r28, r24
    1378:	d9 07       	cpc	r29, r25
    137a:	5c f3       	brlt	.-42     	; 0x1352 <shift+0x72>
		{
			Die();
			
		}
	}
}
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	08 95       	ret

00001386 <seedChange>:
	
	
}

void seedChange()
{
    1386:	0f 93       	push	r16
    1388:	1f 93       	push	r17
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
	//score=0;
	if(seed==pos)
    138e:	20 91 e1 02 	lds	r18, 0x02E1	; 0x8002e1 <seed>
    1392:	30 91 e2 02 	lds	r19, 0x02E2	; 0x8002e2 <seed+0x1>
    1396:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <pos>
    139a:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <pos+0x1>
    139e:	28 17       	cp	r18, r24
    13a0:	39 07       	cpc	r19, r25
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <seedChange+0x20>
    13a4:	a7 c0       	rjmp	.+334    	; 0x14f4 <seedChange+0x16e>
	{	
		
		wm_sz++;
    13a6:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    13aa:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <wm_sz+0x1>
    13b4:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <wm_sz>
		score++;
    13b8:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <score>
    13bc:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <score+0x1>
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <score+0x1>
    13c6:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <score>
	else if(a == 2)
	Lcd8_Cmd(0xC0 + b);
    13ca:	88 ec       	ldi	r24, 0xC8	; 200
    13cc:	0e 94 29 05 	call	0xa52	; 0xa52 <Lcd8_Cmd>
		
		Lcd8_Set_Cursor(2,8);
		intToStr(score,scr);
    13d0:	69 ef       	ldi	r22, 0xF9	; 249
    13d2:	71 e0       	ldi	r23, 0x01	; 1
    13d4:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <score>
    13d8:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <score+0x1>
    13dc:	0e 94 d7 05 	call	0xbae	; 0xbae <intToStr>
		Lcd8_Write_String(scr);
    13e0:	89 ef       	ldi	r24, 0xF9	; 249
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	0e 94 b1 05 	call	0xb62	; 0xb62 <Lcd8_Write_String>
		
		PORTA |= 0b10000000;
    13e8:	df 9a       	sbi	0x1b, 7	; 27
    13ea:	8f ec       	ldi	r24, 0xCF	; 207
    13ec:	97 e0       	ldi	r25, 0x07	; 7
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <seedChange+0x68>
    13f2:	00 c0       	rjmp	.+0      	; 0x13f4 <seedChange+0x6e>
    13f4:	00 00       	nop
		_delay_ms(1);
		PORTA &= 0b01111111;
    13f6:	df 98       	cbi	0x1b, 7	; 27
		
		int timervalue;
		do{
		timervalue=(rand()%256)+1;
    13f8:	0e 94 0d 13 	call	0x261a	; 0x261a <rand>
    13fc:	90 78       	andi	r25, 0x80	; 128
    13fe:	99 23       	and	r25, r25
    1400:	1c f4       	brge	.+6      	; 0x1408 <seedChange+0x82>
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	9f 6f       	ori	r25, 0xFF	; 255
    1406:	01 96       	adiw	r24, 0x01	; 1
    1408:	08 2f       	mov	r16, r24
    140a:	19 2f       	mov	r17, r25
    140c:	ec 01       	movw	r28, r24
    140e:	21 96       	adiw	r28, 0x01	; 1
		
		}while(ifSnakePresent(timervalue) || (ifObstaclePresent(timervalue) && level>2)); 
    1410:	ce 01       	movw	r24, r28
    1412:	0e 94 69 06 	call	0xcd2	; 0xcd2 <ifSnakePresent>
    1416:	89 2b       	or	r24, r25
    1418:	79 f7       	brne	.-34     	; 0x13f8 <seedChange+0x72>
    141a:	ce 01       	movw	r24, r28
    141c:	0e 94 b4 06 	call	0xd68	; 0xd68 <ifObstaclePresent>
    1420:	89 2b       	or	r24, r25
    1422:	31 f0       	breq	.+12     	; 0x1430 <seedChange+0xaa>
    1424:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    1428:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    142c:	03 97       	sbiw	r24, 0x03	; 3
    142e:	24 f7       	brge	.-56     	; 0x13f8 <seedChange+0x72>
		
		seed=timervalue;
    1430:	d0 93 e2 02 	sts	0x02E2, r29	; 0x8002e2 <seed+0x1>
    1434:	c0 93 e1 02 	sts	0x02E1, r28	; 0x8002e1 <seed>
		
		if(seed == 255 && level==2)
    1438:	cf 3f       	cpi	r28, 0xFF	; 255
    143a:	d1 05       	cpc	r29, r1
    143c:	59 f4       	brne	.+22     	; 0x1454 <seedChange+0xce>
    143e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    1442:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    1446:	02 97       	sbiw	r24, 0x02	; 2
    1448:	09 f0       	breq	.+2      	; 0x144c <seedChange+0xc6>
    144a:	4e c0       	rjmp	.+156    	; 0x14e8 <seedChange+0x162>
		seed=seed-1;
    144c:	00 93 e1 02 	sts	0x02E1, r16	; 0x8002e1 <seed>
    1450:	10 93 e2 02 	sts	0x02E2, r17	; 0x8002e2 <seed+0x1>
		
		
		
		//int row = rowCount(i);
		int col = columnNo(seed);
    1454:	c0 91 e1 02 	lds	r28, 0x02E1	; 0x8002e1 <seed>
    1458:	d0 91 e2 02 	lds	r29, 0x02E2	; 0x8002e2 <seed+0x1>
    145c:	ce 01       	movw	r24, r28
    145e:	0e 94 56 06 	call	0xcac	; 0xcac <columnNo>
    1462:	8c 01       	movw	r16, r24
		int matrixNo = (int)ceil(seed/64.0);
    1464:	be 01       	movw	r22, r28
    1466:	dd 0f       	add	r29, r29
    1468:	88 0b       	sbc	r24, r24
    146a:	99 0b       	sbc	r25, r25
    146c:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e8       	ldi	r20, 0x80	; 128
    1476:	5c e3       	ldi	r21, 0x3C	; 60
    1478:	0e 94 08 12 	call	0x2410	; 0x2410 <__mulsf3>
    147c:	0e 94 35 10 	call	0x206a	; 0x206a <ceil>
    1480:	0e 94 c3 10 	call	0x2186	; 0x2186 <__fixsfsi>
		if((matrixNo == 2 || matrixNo == 4) && col==0)
    1484:	62 30       	cpi	r22, 0x02	; 2
    1486:	71 05       	cpc	r23, r1
    1488:	19 f0       	breq	.+6      	; 0x1490 <seedChange+0x10a>
    148a:	64 30       	cpi	r22, 0x04	; 4
    148c:	71 05       	cpc	r23, r1
    148e:	b9 f4       	brne	.+46     	; 0x14be <seedChange+0x138>
    1490:	01 2b       	or	r16, r17
    1492:	a9 f4       	brne	.+42     	; 0x14be <seedChange+0x138>
		{
			seed+= ((rand()%4)+1);
    1494:	0e 94 0d 13 	call	0x261a	; 0x261a <rand>
    1498:	83 70       	andi	r24, 0x03	; 3
    149a:	90 78       	andi	r25, 0x80	; 128
    149c:	99 23       	and	r25, r25
    149e:	24 f4       	brge	.+8      	; 0x14a8 <seedChange+0x122>
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	8c 6f       	ori	r24, 0xFC	; 252
    14a4:	9f 6f       	ori	r25, 0xFF	; 255
    14a6:	01 96       	adiw	r24, 0x01	; 1
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	20 91 e1 02 	lds	r18, 0x02E1	; 0x8002e1 <seed>
    14ae:	30 91 e2 02 	lds	r19, 0x02E2	; 0x8002e2 <seed+0x1>
    14b2:	82 0f       	add	r24, r18
    14b4:	93 1f       	adc	r25, r19
    14b6:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <seed+0x1>
    14ba:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <seed>
		}
		
		
		if(score == 3){
    14be:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <score>
    14c2:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <score+0x1>
    14c6:	03 97       	sbiw	r24, 0x03	; 3
    14c8:	a9 f4       	brne	.+42     	; 0x14f4 <seedChange+0x16e>
		PORTA = 0x00;
    14ca:	1b ba       	out	0x1b, r1	; 27
		PORTD = 0xff;
    14cc:	8f ef       	ldi	r24, 0xFF	; 255
    14ce:	82 bb       	out	0x12, r24	; 18
    14d0:	9f ef       	ldi	r25, 0xFF	; 255
    14d2:	21 ee       	ldi	r18, 0xE1	; 225
    14d4:	84 e0       	ldi	r24, 0x04	; 4
    14d6:	91 50       	subi	r25, 0x01	; 1
    14d8:	20 40       	sbci	r18, 0x00	; 0
    14da:	80 40       	sbci	r24, 0x00	; 0
    14dc:	e1 f7       	brne	.-8      	; 0x14d6 <seedChange+0x150>
    14de:	00 c0       	rjmp	.+0      	; 0x14e0 <seedChange+0x15a>
    14e0:	00 00       	nop
		_delay_ms(levelUpDelay);
		initialize();
    14e2:	0e 94 9a 08 	call	0x1134	; 0x1134 <initialize>
		{
			data1update();
		}*/
		//i=0;
	}
}
    14e6:	06 c0       	rjmp	.+12     	; 0x14f4 <seedChange+0x16e>
		seed=seed-1;
		
		
		
		//int row = rowCount(i);
		int col = columnNo(seed);
    14e8:	8f ef       	ldi	r24, 0xFF	; 255
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 56 06 	call	0xcac	; 0xcac <columnNo>
    14f0:	8c 01       	movw	r16, r24
    14f2:	ce cf       	rjmp	.-100    	; 0x1490 <seedChange+0x10a>
		{
			data1update();
		}*/
		//i=0;
	}
}
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	1f 91       	pop	r17
    14fa:	0f 91       	pop	r16
    14fc:	08 95       	ret

000014fe <right>:
		}
	}
}


void right(){
    14fe:	ef 92       	push	r14
    1500:	ff 92       	push	r15
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
	sss=1;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <sss+0x1>
    1512:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <sss>
	int i,u/*,off*/;

		if(pos%8==0)  //CHECK WHETHER POSITION IS RIGHT EXTREMITY
    1516:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <pos>
    151a:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <pos+0x1>
    151e:	9c 01       	movw	r18, r24
    1520:	27 70       	andi	r18, 0x07	; 7
    1522:	33 27       	eor	r19, r19
    1524:	23 2b       	or	r18, r19
    1526:	09 f0       	breq	.+2      	; 0x152a <right+0x2c>
    1528:	7d c0       	rjmp	.+250    	; 0x1624 <right+0x126>
		{

			//if head is at the end of 0th or 2nd matrix
			if(!whichMatrix || whichMatrix == 2)
    152a:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <whichMatrix>
    152e:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <whichMatrix+0x1>
    1532:	a9 01       	movw	r20, r18
    1534:	4d 7f       	andi	r20, 0xFD	; 253
    1536:	45 2b       	or	r20, r21
    1538:	31 f4       	brne	.+12     	; 0x1546 <right+0x48>
			pos= pos + 57;
    153a:	c9 96       	adiw	r24, 0x39	; 57
    153c:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <pos+0x1>
    1540:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <pos>
    1544:	06 c0       	rjmp	.+12     	; 0x1552 <right+0x54>

			//head is at the edge of 1st or 3rd matrix
			else
			pos = pos - 71;
    1546:	87 54       	subi	r24, 0x47	; 71
    1548:	91 09       	sbc	r25, r1
    154a:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <pos+0x1>
    154e:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <pos>


			//matrix 2 to 3 or vice versa
			//matrix 0 to 1 or vice versa
			whichMatrix ^= 1;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	28 27       	eor	r18, r24
    1556:	30 93 cc 02 	sts	0x02CC, r19	; 0x8002cc <whichMatrix+0x1>
    155a:	20 93 cb 02 	sts	0x02CB, r18	; 0x8002cb <whichMatrix>

			seedChange();
    155e:	0e 94 c3 09 	call	0x1386	; 0x1386 <seedChange>

			shift();
    1562:	0e 94 70 09 	call	0x12e0	; 0x12e0 <shift>
			
			//300 iterations of the loop and 30ms total delay is ideal
			int it;
			if(level<3)
    1566:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    156a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    156e:	83 30       	cpi	r24, 0x03	; 3
    1570:	91 05       	cpc	r25, r1
    1572:	fc f4       	brge	.+62     	; 0x15b2 <right+0xb4>
			it = (int)round(iteration/wm_sz);
    1574:	60 91 c9 02 	lds	r22, 0x02C9	; 0x8002c9 <wm_sz>
    1578:	70 91 ca 02 	lds	r23, 0x02CA	; 0x8002ca <wm_sz+0x1>
    157c:	07 2e       	mov	r0, r23
    157e:	00 0c       	add	r0, r0
    1580:	88 0b       	sbc	r24, r24
    1582:	99 0b       	sbc	r25, r25
    1584:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
    1588:	9b 01       	movw	r18, r22
    158a:	ac 01       	movw	r20, r24
    158c:	60 91 d1 00 	lds	r22, 0x00D1	; 0x8000d1 <iteration>
    1590:	70 91 d2 00 	lds	r23, 0x00D2	; 0x8000d2 <iteration+0x1>
    1594:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <iteration+0x2>
    1598:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <iteration+0x3>
    159c:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__divsf3>
    15a0:	0e 94 75 12 	call	0x24ea	; 0x24ea <round>
    15a4:	0e 94 c3 10 	call	0x2186	; 0x2186 <__fixsfsi>
    15a8:	7b 01       	movw	r14, r22
			it = fourthLevelIt();
			
			
			
			//float delay = 30.0/it;
			for(u=0;u<it;u++)
    15aa:	16 16       	cp	r1, r22
    15ac:	17 06       	cpc	r1, r23
    15ae:	84 f1       	brlt	.+96     	; 0x1610 <right+0x112>
    15b0:	a1 c0       	rjmp	.+322    	; 0x16f4 <right+0x1f6>
			//300 iterations of the loop and 30ms total delay is ideal
			int it;
			if(level<3)
			it = (int)round(iteration/wm_sz);
			
			else if(level == 3)
    15b2:	03 97       	sbiw	r24, 0x03	; 3
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <right+0xba>
    15b6:	a5 c0       	rjmp	.+330    	; 0x1702 <right+0x204>
			it = thirdLevelIt();
			
			else
			it = fourthLevelIt();
    15b8:	68 94       	set
    15ba:	ee 24       	eor	r14, r14
    15bc:	e2 f8       	bld	r14, 2
    15be:	f1 2c       	mov	r15, r1
    15c0:	27 c0       	rjmp	.+78     	; 0x1610 <right+0x112>
			
			
			//float delay = 30.0/it;
			for(u=0;u<it;u++)
			{
				for(i=0;i<wm_sz;i++)
    15c2:	c0 e0       	ldi	r28, 0x00	; 0
    15c4:	d0 e0       	ldi	r29, 0x00	; 0
				{
					position(i);
    15c6:	ce 01       	movw	r24, r28
    15c8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <position>
			
			
			//float delay = 30.0/it;
			for(u=0;u<it;u++)
			{
				for(i=0;i<wm_sz;i++)
    15cc:	21 96       	adiw	r28, 0x01	; 1
    15ce:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    15d2:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    15d6:	c8 17       	cp	r28, r24
    15d8:	d9 07       	cpc	r29, r25
    15da:	ac f3       	brlt	.-22     	; 0x15c6 <right+0xc8>
					//_delay_ms(delayVal/wm_sz);
					//seedPosition(seed);
				}
				//float delay = .3;
				//_delay_ms(delayVal);
				seedPosition(seed);
    15dc:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <seed>
    15e0:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <seed+0x1>
    15e4:	0e 94 19 08 	call	0x1032	; 0x1032 <seedPosition>
				
				if(level==3)
    15e8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    15ec:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    15f0:	83 30       	cpi	r24, 0x03	; 3
    15f2:	91 05       	cpc	r25, r1
    15f4:	19 f4       	brne	.+6      	; 0x15fc <right+0xfe>
				showThirdLevel();
    15f6:	0e 94 91 07 	call	0xf22	; 0xf22 <showThirdLevel>
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <right+0x106>
				
				else if(level == 4)
    15fc:	04 97       	sbiw	r24, 0x04	; 4
    15fe:	11 f4       	brne	.+4      	; 0x1604 <right+0x106>
				showFourthLevel();
    1600:	0e 94 aa 07 	call	0xf54	; 0xf54 <showFourthLevel>
			it = fourthLevelIt();
			
			
			
			//float delay = 30.0/it;
			for(u=0;u<it;u++)
    1604:	0f 5f       	subi	r16, 0xFF	; 255
    1606:	1f 4f       	sbci	r17, 0xFF	; 255
    1608:	0e 15       	cp	r16, r14
    160a:	1f 05       	cpc	r17, r15
    160c:	1c f0       	brlt	.+6      	; 0x1614 <right+0x116>
    160e:	72 c0       	rjmp	.+228    	; 0x16f4 <right+0x1f6>
			{
				for(i=0;i<wm_sz;i++)
    1610:	00 e0       	ldi	r16, 0x00	; 0
    1612:	10 e0       	ldi	r17, 0x00	; 0
    1614:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    1618:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    161c:	18 16       	cp	r1, r24
    161e:	19 06       	cpc	r1, r25
    1620:	84 f2       	brlt	.-96     	; 0x15c2 <right+0xc4>
    1622:	dc cf       	rjmp	.-72     	; 0x15dc <right+0xde>
			//_delay_ms(1);
		}

		else
		{
			pos=pos+1;
    1624:	01 96       	adiw	r24, 0x01	; 1
    1626:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <pos+0x1>
    162a:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <pos>
			seedChange();
    162e:	0e 94 c3 09 	call	0x1386	; 0x1386 <seedChange>
			shift();
    1632:	0e 94 70 09 	call	0x12e0	; 0x12e0 <shift>
			
			int it;
			if(level<3)
    1636:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    163a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	91 05       	cpc	r25, r1
    1642:	fc f4       	brge	.+62     	; 0x1682 <right+0x184>
			it = (int)round(iteration/wm_sz);
    1644:	60 91 c9 02 	lds	r22, 0x02C9	; 0x8002c9 <wm_sz>
    1648:	70 91 ca 02 	lds	r23, 0x02CA	; 0x8002ca <wm_sz+0x1>
    164c:	07 2e       	mov	r0, r23
    164e:	00 0c       	add	r0, r0
    1650:	88 0b       	sbc	r24, r24
    1652:	99 0b       	sbc	r25, r25
    1654:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
    1658:	9b 01       	movw	r18, r22
    165a:	ac 01       	movw	r20, r24
    165c:	60 91 d1 00 	lds	r22, 0x00D1	; 0x8000d1 <iteration>
    1660:	70 91 d2 00 	lds	r23, 0x00D2	; 0x8000d2 <iteration+0x1>
    1664:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <iteration+0x2>
    1668:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <iteration+0x3>
    166c:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__divsf3>
    1670:	0e 94 75 12 	call	0x24ea	; 0x24ea <round>
    1674:	0e 94 c3 10 	call	0x2186	; 0x2186 <__fixsfsi>
    1678:	7b 01       	movw	r14, r22
			it = thirdLevelIt();
			
			else
			it = fourthLevelIt();
			
			for(u=0;u<it;u++)
    167a:	16 16       	cp	r1, r22
    167c:	17 06       	cpc	r1, r23
    167e:	84 f1       	brlt	.+96     	; 0x16e0 <right+0x1e2>
    1680:	39 c0       	rjmp	.+114    	; 0x16f4 <right+0x1f6>
			
			int it;
			if(level<3)
			it = (int)round(iteration/wm_sz);
			
			else if(level == 3)
    1682:	03 97       	sbiw	r24, 0x03	; 3
    1684:	09 f4       	brne	.+2      	; 0x1688 <right+0x18a>
    1686:	43 c0       	rjmp	.+134    	; 0x170e <right+0x210>
			it = thirdLevelIt();
			
			else
			it = fourthLevelIt();
    1688:	68 94       	set
    168a:	ee 24       	eor	r14, r14
    168c:	e2 f8       	bld	r14, 2
    168e:	f1 2c       	mov	r15, r1
    1690:	27 c0       	rjmp	.+78     	; 0x16e0 <right+0x1e2>
			
			for(u=0;u<it;u++)
			{
				for(i=0;i<wm_sz;i++)
    1692:	c0 e0       	ldi	r28, 0x00	; 0
    1694:	d0 e0       	ldi	r29, 0x00	; 0
				{
					position(i);
    1696:	ce 01       	movw	r24, r28
    1698:	0e 94 b5 07 	call	0xf6a	; 0xf6a <position>
			else
			it = fourthLevelIt();
			
			for(u=0;u<it;u++)
			{
				for(i=0;i<wm_sz;i++)
    169c:	21 96       	adiw	r28, 0x01	; 1
    169e:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    16a2:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    16a6:	c8 17       	cp	r28, r24
    16a8:	d9 07       	cpc	r29, r25
    16aa:	ac f3       	brlt	.-22     	; 0x1696 <right+0x198>
					//_delay_ms(100);
					//seedPosition(seed);
				}
				
				//_delay_ms(delayVal);
				seedPosition(seed);
    16ac:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <seed>
    16b0:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <seed+0x1>
    16b4:	0e 94 19 08 	call	0x1032	; 0x1032 <seedPosition>
				if(level==3)
    16b8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    16bc:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    16c0:	83 30       	cpi	r24, 0x03	; 3
    16c2:	91 05       	cpc	r25, r1
    16c4:	19 f4       	brne	.+6      	; 0x16cc <right+0x1ce>
				showThirdLevel();
    16c6:	0e 94 91 07 	call	0xf22	; 0xf22 <showThirdLevel>
    16ca:	04 c0       	rjmp	.+8      	; 0x16d4 <right+0x1d6>
				
				else if(level == 4)
    16cc:	04 97       	sbiw	r24, 0x04	; 4
    16ce:	11 f4       	brne	.+4      	; 0x16d4 <right+0x1d6>
				showFourthLevel();
    16d0:	0e 94 aa 07 	call	0xf54	; 0xf54 <showFourthLevel>
			it = thirdLevelIt();
			
			else
			it = fourthLevelIt();
			
			for(u=0;u<it;u++)
    16d4:	0f 5f       	subi	r16, 0xFF	; 255
    16d6:	1f 4f       	sbci	r17, 0xFF	; 255
    16d8:	0e 15       	cp	r16, r14
    16da:	1f 05       	cpc	r17, r15
    16dc:	1c f0       	brlt	.+6      	; 0x16e4 <right+0x1e6>
    16de:	0a c0       	rjmp	.+20     	; 0x16f4 <right+0x1f6>
			{
				for(i=0;i<wm_sz;i++)
    16e0:	00 e0       	ldi	r16, 0x00	; 0
    16e2:	10 e0       	ldi	r17, 0x00	; 0
    16e4:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    16e8:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    16ec:	18 16       	cp	r1, r24
    16ee:	19 06       	cpc	r1, r25
    16f0:	84 f2       	brlt	.-96     	; 0x1692 <right+0x194>
    16f2:	dc cf       	rjmp	.-72     	; 0x16ac <right+0x1ae>
			//{
				//offstate();
			//}
			//_delay_ms(1);
		}
		status=1;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <status+0x1>
    16fc:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <status>
		//init_interrupts();
}
    1700:	0c c0       	rjmp	.+24     	; 0x171a <right+0x21c>
			int it;
			if(level<3)
			it = (int)round(iteration/wm_sz);
			
			else if(level == 3)
			it = thirdLevelIt();
    1702:	0f 2e       	mov	r0, r31
    1704:	f5 e0       	ldi	r31, 0x05	; 5
    1706:	ef 2e       	mov	r14, r31
    1708:	f1 2c       	mov	r15, r1
    170a:	f0 2d       	mov	r31, r0
    170c:	81 cf       	rjmp	.-254    	; 0x1610 <right+0x112>
			int it;
			if(level<3)
			it = (int)round(iteration/wm_sz);
			
			else if(level == 3)
			it = thirdLevelIt();
    170e:	0f 2e       	mov	r0, r31
    1710:	f5 e0       	ldi	r31, 0x05	; 5
    1712:	ef 2e       	mov	r14, r31
    1714:	f1 2c       	mov	r15, r1
    1716:	f0 2d       	mov	r31, r0
    1718:	e3 cf       	rjmp	.-58     	; 0x16e0 <right+0x1e2>
			//}
			//_delay_ms(1);
		}
		status=1;
		//init_interrupts();
}
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	ff 90       	pop	r15
    1724:	ef 90       	pop	r14
    1726:	08 95       	ret

00001728 <left>:

void left()
{
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
	sss=1;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <sss+0x1>
    173c:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <sss>
	int i,u/*,off*/;

		if(((pos+7)%8)==0)//CHECK WHETHER POSITION IS LEFT EXTREMITY
    1740:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <pos>
    1744:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <pos+0x1>
    1748:	9c 01       	movw	r18, r24
    174a:	29 5f       	subi	r18, 0xF9	; 249
    174c:	3f 4f       	sbci	r19, 0xFF	; 255
    174e:	27 70       	andi	r18, 0x07	; 7
    1750:	33 27       	eor	r19, r19
    1752:	23 2b       	or	r18, r19
    1754:	09 f0       	breq	.+2      	; 0x1758 <left+0x30>
    1756:	7d c0       	rjmp	.+250    	; 0x1852 <left+0x12a>

		{
			//if head at the edge of the 0th or the 2nd matrix
			if(!whichMatrix || whichMatrix == 2)
    1758:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <whichMatrix>
    175c:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <whichMatrix+0x1>
    1760:	a9 01       	movw	r20, r18
    1762:	4d 7f       	andi	r20, 0xFD	; 253
    1764:	45 2b       	or	r20, r21
    1766:	39 f4       	brne	.+14     	; 0x1776 <left+0x4e>
			pos = pos + 71;
    1768:	89 5b       	subi	r24, 0xB9	; 185
    176a:	9f 4f       	sbci	r25, 0xFF	; 255
    176c:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <pos+0x1>
    1770:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <pos>
    1774:	05 c0       	rjmp	.+10     	; 0x1780 <left+0x58>

			//if head is at the edge of the 1st or 3rd matrix
			else
			pos=pos-57;
    1776:	c9 97       	sbiw	r24, 0x39	; 57
    1778:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <pos+0x1>
    177c:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <pos>

			//matrix 2 to 3 or vice versa
			//matrix 0 to 1 or vice versa
			whichMatrix ^= 1;
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	28 27       	eor	r18, r24
    1784:	30 93 cc 02 	sts	0x02CC, r19	; 0x8002cc <whichMatrix+0x1>
    1788:	20 93 cb 02 	sts	0x02CB, r18	; 0x8002cb <whichMatrix>

			seedChange();
    178c:	0e 94 c3 09 	call	0x1386	; 0x1386 <seedChange>
			shift();
    1790:	0e 94 70 09 	call	0x12e0	; 0x12e0 <shift>
			int it;
			
			if(level<3)
    1794:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    1798:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    179c:	83 30       	cpi	r24, 0x03	; 3
    179e:	91 05       	cpc	r25, r1
    17a0:	fc f4       	brge	.+62     	; 0x17e0 <left+0xb8>
			it = (int)round(iteration/wm_sz);
    17a2:	60 91 c9 02 	lds	r22, 0x02C9	; 0x8002c9 <wm_sz>
    17a6:	70 91 ca 02 	lds	r23, 0x02CA	; 0x8002ca <wm_sz+0x1>
    17aa:	07 2e       	mov	r0, r23
    17ac:	00 0c       	add	r0, r0
    17ae:	88 0b       	sbc	r24, r24
    17b0:	99 0b       	sbc	r25, r25
    17b2:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
    17b6:	9b 01       	movw	r18, r22
    17b8:	ac 01       	movw	r20, r24
    17ba:	60 91 d1 00 	lds	r22, 0x00D1	; 0x8000d1 <iteration>
    17be:	70 91 d2 00 	lds	r23, 0x00D2	; 0x8000d2 <iteration+0x1>
    17c2:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <iteration+0x2>
    17c6:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <iteration+0x3>
    17ca:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__divsf3>
    17ce:	0e 94 75 12 	call	0x24ea	; 0x24ea <round>
    17d2:	0e 94 c3 10 	call	0x2186	; 0x2186 <__fixsfsi>
    17d6:	7b 01       	movw	r14, r22
			it = thirdLevelIt();
			
			else
			it = fourthLevelIt();
			
			for(u=0;u<it;u++)
    17d8:	16 16       	cp	r1, r22
    17da:	17 06       	cpc	r1, r23
    17dc:	84 f1       	brlt	.+96     	; 0x183e <left+0x116>
    17de:	a1 c0       	rjmp	.+322    	; 0x1922 <left+0x1fa>
			int it;
			
			if(level<3)
			it = (int)round(iteration/wm_sz);
			
			else if(level == 3)
    17e0:	03 97       	sbiw	r24, 0x03	; 3
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <left+0xbe>
    17e4:	a5 c0       	rjmp	.+330    	; 0x1930 <left+0x208>
			it = thirdLevelIt();
			
			else
			it = fourthLevelIt();
    17e6:	68 94       	set
    17e8:	ee 24       	eor	r14, r14
    17ea:	e2 f8       	bld	r14, 2
    17ec:	f1 2c       	mov	r15, r1
    17ee:	27 c0       	rjmp	.+78     	; 0x183e <left+0x116>
			
			for(u=0;u<it;u++)
			{
				for(i=0;i<wm_sz;i++)
    17f0:	c0 e0       	ldi	r28, 0x00	; 0
    17f2:	d0 e0       	ldi	r29, 0x00	; 0
				{
					position(i);
    17f4:	ce 01       	movw	r24, r28
    17f6:	0e 94 b5 07 	call	0xf6a	; 0xf6a <position>
			else
			it = fourthLevelIt();
			
			for(u=0;u<it;u++)
			{
				for(i=0;i<wm_sz;i++)
    17fa:	21 96       	adiw	r28, 0x01	; 1
    17fc:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    1800:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    1804:	c8 17       	cp	r28, r24
    1806:	d9 07       	cpc	r29, r25
    1808:	ac f3       	brlt	.-22     	; 0x17f4 <left+0xcc>
				{
					position(i);
					//seedPosition(seed);
				}
				//_delay_ms(delayVal);
				seedPosition(seed);
    180a:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <seed>
    180e:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <seed+0x1>
    1812:	0e 94 19 08 	call	0x1032	; 0x1032 <seedPosition>
				if(level==3)
    1816:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    181a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    181e:	83 30       	cpi	r24, 0x03	; 3
    1820:	91 05       	cpc	r25, r1
    1822:	19 f4       	brne	.+6      	; 0x182a <left+0x102>
				showThirdLevel();
    1824:	0e 94 91 07 	call	0xf22	; 0xf22 <showThirdLevel>
    1828:	04 c0       	rjmp	.+8      	; 0x1832 <left+0x10a>
				
				else if(level == 4)
    182a:	04 97       	sbiw	r24, 0x04	; 4
    182c:	11 f4       	brne	.+4      	; 0x1832 <left+0x10a>
				showFourthLevel();
    182e:	0e 94 aa 07 	call	0xf54	; 0xf54 <showFourthLevel>
			it = thirdLevelIt();
			
			else
			it = fourthLevelIt();
			
			for(u=0;u<it;u++)
    1832:	0f 5f       	subi	r16, 0xFF	; 255
    1834:	1f 4f       	sbci	r17, 0xFF	; 255
    1836:	0e 15       	cp	r16, r14
    1838:	1f 05       	cpc	r17, r15
    183a:	1c f0       	brlt	.+6      	; 0x1842 <left+0x11a>
    183c:	72 c0       	rjmp	.+228    	; 0x1922 <left+0x1fa>
			{
				for(i=0;i<wm_sz;i++)
    183e:	00 e0       	ldi	r16, 0x00	; 0
    1840:	10 e0       	ldi	r17, 0x00	; 0
    1842:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    1846:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    184a:	18 16       	cp	r1, r24
    184c:	19 06       	cpc	r1, r25
    184e:	84 f2       	brlt	.-96     	; 0x17f0 <left+0xc8>
    1850:	dc cf       	rjmp	.-72     	; 0x180a <left+0xe2>
			}*/
			//_delay_ms(1);
		}
		else
		{
			pos=pos-1;
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <pos+0x1>
    1858:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <pos>
			seedChange();
    185c:	0e 94 c3 09 	call	0x1386	; 0x1386 <seedChange>
			shift();
    1860:	0e 94 70 09 	call	0x12e0	; 0x12e0 <shift>
			int it;
			
			if(level<3)
    1864:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    1868:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    186c:	83 30       	cpi	r24, 0x03	; 3
    186e:	91 05       	cpc	r25, r1
    1870:	fc f4       	brge	.+62     	; 0x18b0 <left+0x188>
			it = (int)round(iteration/wm_sz);
    1872:	60 91 c9 02 	lds	r22, 0x02C9	; 0x8002c9 <wm_sz>
    1876:	70 91 ca 02 	lds	r23, 0x02CA	; 0x8002ca <wm_sz+0x1>
    187a:	07 2e       	mov	r0, r23
    187c:	00 0c       	add	r0, r0
    187e:	88 0b       	sbc	r24, r24
    1880:	99 0b       	sbc	r25, r25
    1882:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
    1886:	9b 01       	movw	r18, r22
    1888:	ac 01       	movw	r20, r24
    188a:	60 91 d1 00 	lds	r22, 0x00D1	; 0x8000d1 <iteration>
    188e:	70 91 d2 00 	lds	r23, 0x00D2	; 0x8000d2 <iteration+0x1>
    1892:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <iteration+0x2>
    1896:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <iteration+0x3>
    189a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__divsf3>
    189e:	0e 94 75 12 	call	0x24ea	; 0x24ea <round>
    18a2:	0e 94 c3 10 	call	0x2186	; 0x2186 <__fixsfsi>
    18a6:	7b 01       	movw	r14, r22
			it = thirdLevelIt();
			
			else
			it = fourthLevelIt();
			
			for(u=0;u<it;u++)
    18a8:	16 16       	cp	r1, r22
    18aa:	17 06       	cpc	r1, r23
    18ac:	84 f1       	brlt	.+96     	; 0x190e <left+0x1e6>
    18ae:	39 c0       	rjmp	.+114    	; 0x1922 <left+0x1fa>
			int it;
			
			if(level<3)
			it = (int)round(iteration/wm_sz);
			
			else if(level == 3)
    18b0:	03 97       	sbiw	r24, 0x03	; 3
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <left+0x18e>
    18b4:	43 c0       	rjmp	.+134    	; 0x193c <left+0x214>
			it = thirdLevelIt();
			
			else
			it = fourthLevelIt();
    18b6:	68 94       	set
    18b8:	ee 24       	eor	r14, r14
    18ba:	e2 f8       	bld	r14, 2
    18bc:	f1 2c       	mov	r15, r1
    18be:	27 c0       	rjmp	.+78     	; 0x190e <left+0x1e6>
			
			for(u=0;u<it;u++)
			{
				for(i=0;i<wm_sz;i++)
    18c0:	c0 e0       	ldi	r28, 0x00	; 0
    18c2:	d0 e0       	ldi	r29, 0x00	; 0
				{
					position(i);
    18c4:	ce 01       	movw	r24, r28
    18c6:	0e 94 b5 07 	call	0xf6a	; 0xf6a <position>
			else
			it = fourthLevelIt();
			
			for(u=0;u<it;u++)
			{
				for(i=0;i<wm_sz;i++)
    18ca:	21 96       	adiw	r28, 0x01	; 1
    18cc:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    18d0:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    18d4:	c8 17       	cp	r28, r24
    18d6:	d9 07       	cpc	r29, r25
    18d8:	ac f3       	brlt	.-22     	; 0x18c4 <left+0x19c>
				{
					position(i);
					//seedPosition(seed);
				}
				//_delay_ms(delayVal);
				seedPosition(seed);
    18da:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <seed>
    18de:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <seed+0x1>
    18e2:	0e 94 19 08 	call	0x1032	; 0x1032 <seedPosition>
				if(level==3)
    18e6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    18ea:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    18ee:	83 30       	cpi	r24, 0x03	; 3
    18f0:	91 05       	cpc	r25, r1
    18f2:	19 f4       	brne	.+6      	; 0x18fa <left+0x1d2>
				showThirdLevel();
    18f4:	0e 94 91 07 	call	0xf22	; 0xf22 <showThirdLevel>
    18f8:	04 c0       	rjmp	.+8      	; 0x1902 <left+0x1da>
				
				else if(level == 4)
    18fa:	04 97       	sbiw	r24, 0x04	; 4
    18fc:	11 f4       	brne	.+4      	; 0x1902 <left+0x1da>
				showFourthLevel();
    18fe:	0e 94 aa 07 	call	0xf54	; 0xf54 <showFourthLevel>
			it = thirdLevelIt();
			
			else
			it = fourthLevelIt();
			
			for(u=0;u<it;u++)
    1902:	0f 5f       	subi	r16, 0xFF	; 255
    1904:	1f 4f       	sbci	r17, 0xFF	; 255
    1906:	0e 15       	cp	r16, r14
    1908:	1f 05       	cpc	r17, r15
    190a:	1c f0       	brlt	.+6      	; 0x1912 <left+0x1ea>
    190c:	0a c0       	rjmp	.+20     	; 0x1922 <left+0x1fa>
			{
				for(i=0;i<wm_sz;i++)
    190e:	00 e0       	ldi	r16, 0x00	; 0
    1910:	10 e0       	ldi	r17, 0x00	; 0
    1912:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    1916:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    191a:	18 16       	cp	r1, r24
    191c:	19 06       	cpc	r1, r25
    191e:	84 f2       	brlt	.-96     	; 0x18c0 <left+0x198>
    1920:	dc cf       	rjmp	.-72     	; 0x18da <left+0x1b2>
			{
				offstate();
			}*/
			//_delay_ms(1);
		}
		status=3;
    1922:	83 e0       	ldi	r24, 0x03	; 3
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <status+0x1>
    192a:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <status>
		//init_interrupts();

}
    192e:	0c c0       	rjmp	.+24     	; 0x1948 <left+0x220>
			
			if(level<3)
			it = (int)round(iteration/wm_sz);
			
			else if(level == 3)
			it = thirdLevelIt();
    1930:	0f 2e       	mov	r0, r31
    1932:	f5 e0       	ldi	r31, 0x05	; 5
    1934:	ef 2e       	mov	r14, r31
    1936:	f1 2c       	mov	r15, r1
    1938:	f0 2d       	mov	r31, r0
    193a:	81 cf       	rjmp	.-254    	; 0x183e <left+0x116>
			
			if(level<3)
			it = (int)round(iteration/wm_sz);
			
			else if(level == 3)
			it = thirdLevelIt();
    193c:	0f 2e       	mov	r0, r31
    193e:	f5 e0       	ldi	r31, 0x05	; 5
    1940:	ef 2e       	mov	r14, r31
    1942:	f1 2c       	mov	r15, r1
    1944:	f0 2d       	mov	r31, r0
    1946:	e3 cf       	rjmp	.-58     	; 0x190e <left+0x1e6>
			//_delay_ms(1);
		}
		status=3;
		//init_interrupts();

}
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	1f 91       	pop	r17
    194e:	0f 91       	pop	r16
    1950:	ff 90       	pop	r15
    1952:	ef 90       	pop	r14
    1954:	08 95       	ret

00001956 <up>:

/*void no_inp(){
	if(status==1) right();
}*/
void up()
{
    1956:	ef 92       	push	r14
    1958:	ff 92       	push	r15
    195a:	0f 93       	push	r16
    195c:	1f 93       	push	r17
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
	sss=1;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <sss+0x1>
    196a:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <sss>
	int i,u/*,off*/;
	int rowNo = rowCount(pos);
    196e:	c0 91 f3 01 	lds	r28, 0x01F3	; 0x8001f3 <pos>
    1972:	d0 91 f4 01 	lds	r29, 0x01F4	; 0x8001f4 <pos+0x1>
    1976:	ce 01       	movw	r24, r28
    1978:	0e 94 22 06 	call	0xc44	; 0xc44 <rowCount>
	
	if(rowNo == 0)//CHECK WHETHER POSITION IS UP EXTREMITY
    197c:	89 2b       	or	r24, r25
    197e:	09 f0       	breq	.+2      	; 0x1982 <up+0x2c>
    1980:	76 c0       	rjmp	.+236    	; 0x1a6e <up+0x118>

	{
		if((pos>=129 && pos<=136) || (pos>=193 && pos<=200))
    1982:	ce 01       	movw	r24, r28
    1984:	8f 7b       	andi	r24, 0xBF	; 191
    1986:	81 58       	subi	r24, 0x81	; 129
    1988:	91 09       	sbc	r25, r1
    198a:	08 97       	sbiw	r24, 0x08	; 8
    198c:	38 f4       	brcc	.+14     	; 0x199c <up+0x46>
		pos=pos-72;
    198e:	c8 54       	subi	r28, 0x48	; 72
    1990:	d1 09       	sbc	r29, r1
    1992:	d0 93 f4 01 	sts	0x01F4, r29	; 0x8001f4 <pos+0x1>
    1996:	c0 93 f3 01 	sts	0x01F3, r28	; 0x8001f3 <pos>
    199a:	06 c0       	rjmp	.+12     	; 0x19a8 <up+0x52>
		
		else
		pos = pos + 184;
    199c:	c8 54       	subi	r28, 0x48	; 72
    199e:	df 4f       	sbci	r29, 0xFF	; 255
    19a0:	d0 93 f4 01 	sts	0x01F4, r29	; 0x8001f4 <pos+0x1>
    19a4:	c0 93 f3 01 	sts	0x01F3, r28	; 0x8001f3 <pos>
		
		seedChange();
    19a8:	0e 94 c3 09 	call	0x1386	; 0x1386 <seedChange>
		shift();
    19ac:	0e 94 70 09 	call	0x12e0	; 0x12e0 <shift>
		
		int it;
		if(level<3)
    19b0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    19b4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    19b8:	83 30       	cpi	r24, 0x03	; 3
    19ba:	91 05       	cpc	r25, r1
    19bc:	fc f4       	brge	.+62     	; 0x19fc <up+0xa6>
		it = (int)round(iteration/wm_sz);
    19be:	60 91 c9 02 	lds	r22, 0x02C9	; 0x8002c9 <wm_sz>
    19c2:	70 91 ca 02 	lds	r23, 0x02CA	; 0x8002ca <wm_sz+0x1>
    19c6:	07 2e       	mov	r0, r23
    19c8:	00 0c       	add	r0, r0
    19ca:	88 0b       	sbc	r24, r24
    19cc:	99 0b       	sbc	r25, r25
    19ce:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
    19d2:	9b 01       	movw	r18, r22
    19d4:	ac 01       	movw	r20, r24
    19d6:	60 91 d1 00 	lds	r22, 0x00D1	; 0x8000d1 <iteration>
    19da:	70 91 d2 00 	lds	r23, 0x00D2	; 0x8000d2 <iteration+0x1>
    19de:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <iteration+0x2>
    19e2:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <iteration+0x3>
    19e6:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__divsf3>
    19ea:	0e 94 75 12 	call	0x24ea	; 0x24ea <round>
    19ee:	0e 94 c3 10 	call	0x2186	; 0x2186 <__fixsfsi>
    19f2:	7b 01       	movw	r14, r22
		it = thirdLevelIt();
		
		else
		it = fourthLevelIt();
		
		for(u=0;u<it;u++)
    19f4:	16 16       	cp	r1, r22
    19f6:	17 06       	cpc	r1, r23
    19f8:	84 f1       	brlt	.+96     	; 0x1a5a <up+0x104>
    19fa:	a1 c0       	rjmp	.+322    	; 0x1b3e <up+0x1e8>
		
		int it;
		if(level<3)
		it = (int)round(iteration/wm_sz);
		
		else if(level == 3)
    19fc:	03 97       	sbiw	r24, 0x03	; 3
    19fe:	09 f4       	brne	.+2      	; 0x1a02 <up+0xac>
    1a00:	a5 c0       	rjmp	.+330    	; 0x1b4c <up+0x1f6>
		it = thirdLevelIt();
		
		else
		it = fourthLevelIt();
    1a02:	68 94       	set
    1a04:	ee 24       	eor	r14, r14
    1a06:	e2 f8       	bld	r14, 2
    1a08:	f1 2c       	mov	r15, r1
    1a0a:	27 c0       	rjmp	.+78     	; 0x1a5a <up+0x104>
		
		for(u=0;u<it;u++)
		{
			for(i=0;i<wm_sz;i++)
    1a0c:	c0 e0       	ldi	r28, 0x00	; 0
    1a0e:	d0 e0       	ldi	r29, 0x00	; 0
			{
				position(i);
    1a10:	ce 01       	movw	r24, r28
    1a12:	0e 94 b5 07 	call	0xf6a	; 0xf6a <position>
		else
		it = fourthLevelIt();
		
		for(u=0;u<it;u++)
		{
			for(i=0;i<wm_sz;i++)
    1a16:	21 96       	adiw	r28, 0x01	; 1
    1a18:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    1a1c:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    1a20:	c8 17       	cp	r28, r24
    1a22:	d9 07       	cpc	r29, r25
    1a24:	ac f3       	brlt	.-22     	; 0x1a10 <up+0xba>
			{
				position(i);
				//seedPosition(seed);
			}
			//_delay_ms(delayVal);
			seedPosition(seed);
    1a26:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <seed>
    1a2a:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <seed+0x1>
    1a2e:	0e 94 19 08 	call	0x1032	; 0x1032 <seedPosition>
			if(level==3)
    1a32:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    1a36:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    1a3a:	83 30       	cpi	r24, 0x03	; 3
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	19 f4       	brne	.+6      	; 0x1a46 <up+0xf0>
			showThirdLevel();
    1a40:	0e 94 91 07 	call	0xf22	; 0xf22 <showThirdLevel>
    1a44:	04 c0       	rjmp	.+8      	; 0x1a4e <up+0xf8>
			
			else if(level == 4)
    1a46:	04 97       	sbiw	r24, 0x04	; 4
    1a48:	11 f4       	brne	.+4      	; 0x1a4e <up+0xf8>
			showFourthLevel();
    1a4a:	0e 94 aa 07 	call	0xf54	; 0xf54 <showFourthLevel>
		it = thirdLevelIt();
		
		else
		it = fourthLevelIt();
		
		for(u=0;u<it;u++)
    1a4e:	0f 5f       	subi	r16, 0xFF	; 255
    1a50:	1f 4f       	sbci	r17, 0xFF	; 255
    1a52:	0e 15       	cp	r16, r14
    1a54:	1f 05       	cpc	r17, r15
    1a56:	1c f0       	brlt	.+6      	; 0x1a5e <up+0x108>
    1a58:	72 c0       	rjmp	.+228    	; 0x1b3e <up+0x1e8>
		{
			for(i=0;i<wm_sz;i++)
    1a5a:	00 e0       	ldi	r16, 0x00	; 0
    1a5c:	10 e0       	ldi	r17, 0x00	; 0
    1a5e:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    1a62:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    1a66:	18 16       	cp	r1, r24
    1a68:	19 06       	cpc	r1, r25
    1a6a:	84 f2       	brlt	.-96     	; 0x1a0c <up+0xb6>
    1a6c:	dc cf       	rjmp	.-72     	; 0x1a26 <up+0xd0>
		}*/
		//_delay_ms(1);
	}
	else
	{
		pos=pos-8;
    1a6e:	28 97       	sbiw	r28, 0x08	; 8
    1a70:	d0 93 f4 01 	sts	0x01F4, r29	; 0x8001f4 <pos+0x1>
    1a74:	c0 93 f3 01 	sts	0x01F3, r28	; 0x8001f3 <pos>
		seedChange();
    1a78:	0e 94 c3 09 	call	0x1386	; 0x1386 <seedChange>
		shift();
    1a7c:	0e 94 70 09 	call	0x12e0	; 0x12e0 <shift>
		
		int it;
		if(level<3)
    1a80:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    1a84:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    1a88:	83 30       	cpi	r24, 0x03	; 3
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	fc f4       	brge	.+62     	; 0x1acc <up+0x176>
		it = (int)round(iteration/wm_sz);
    1a8e:	60 91 c9 02 	lds	r22, 0x02C9	; 0x8002c9 <wm_sz>
    1a92:	70 91 ca 02 	lds	r23, 0x02CA	; 0x8002ca <wm_sz+0x1>
    1a96:	07 2e       	mov	r0, r23
    1a98:	00 0c       	add	r0, r0
    1a9a:	88 0b       	sbc	r24, r24
    1a9c:	99 0b       	sbc	r25, r25
    1a9e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
    1aa2:	9b 01       	movw	r18, r22
    1aa4:	ac 01       	movw	r20, r24
    1aa6:	60 91 d1 00 	lds	r22, 0x00D1	; 0x8000d1 <iteration>
    1aaa:	70 91 d2 00 	lds	r23, 0x00D2	; 0x8000d2 <iteration+0x1>
    1aae:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <iteration+0x2>
    1ab2:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <iteration+0x3>
    1ab6:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__divsf3>
    1aba:	0e 94 75 12 	call	0x24ea	; 0x24ea <round>
    1abe:	0e 94 c3 10 	call	0x2186	; 0x2186 <__fixsfsi>
    1ac2:	7b 01       	movw	r14, r22
		it = thirdLevelIt();
		
		else
		it = fourthLevelIt();
		
		for(u=0;u<it;u++)
    1ac4:	16 16       	cp	r1, r22
    1ac6:	17 06       	cpc	r1, r23
    1ac8:	84 f1       	brlt	.+96     	; 0x1b2a <up+0x1d4>
    1aca:	39 c0       	rjmp	.+114    	; 0x1b3e <up+0x1e8>
		
		int it;
		if(level<3)
		it = (int)round(iteration/wm_sz);
		
		else if(level == 3)
    1acc:	03 97       	sbiw	r24, 0x03	; 3
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <up+0x17c>
    1ad0:	43 c0       	rjmp	.+134    	; 0x1b58 <up+0x202>
		it = thirdLevelIt();
		
		else
		it = fourthLevelIt();
    1ad2:	68 94       	set
    1ad4:	ee 24       	eor	r14, r14
    1ad6:	e2 f8       	bld	r14, 2
    1ad8:	f1 2c       	mov	r15, r1
    1ada:	27 c0       	rjmp	.+78     	; 0x1b2a <up+0x1d4>
		
		for(u=0;u<it;u++)
		{
			for(i=0;i<wm_sz;i++)
    1adc:	c0 e0       	ldi	r28, 0x00	; 0
    1ade:	d0 e0       	ldi	r29, 0x00	; 0
			{
				position(i);
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	0e 94 b5 07 	call	0xf6a	; 0xf6a <position>
		else
		it = fourthLevelIt();
		
		for(u=0;u<it;u++)
		{
			for(i=0;i<wm_sz;i++)
    1ae6:	21 96       	adiw	r28, 0x01	; 1
    1ae8:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    1aec:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    1af0:	c8 17       	cp	r28, r24
    1af2:	d9 07       	cpc	r29, r25
    1af4:	ac f3       	brlt	.-22     	; 0x1ae0 <up+0x18a>
			{
				position(i);
				//seedPosition(seed);
			}
			//_delay_ms(delayVal);
			seedPosition(seed);
    1af6:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <seed>
    1afa:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <seed+0x1>
    1afe:	0e 94 19 08 	call	0x1032	; 0x1032 <seedPosition>
			if(level==3)
    1b02:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    1b06:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    1b0a:	83 30       	cpi	r24, 0x03	; 3
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	19 f4       	brne	.+6      	; 0x1b16 <up+0x1c0>
			showThirdLevel();
    1b10:	0e 94 91 07 	call	0xf22	; 0xf22 <showThirdLevel>
    1b14:	04 c0       	rjmp	.+8      	; 0x1b1e <up+0x1c8>
			
			else if(level == 4)
    1b16:	04 97       	sbiw	r24, 0x04	; 4
    1b18:	11 f4       	brne	.+4      	; 0x1b1e <up+0x1c8>
			showFourthLevel();
    1b1a:	0e 94 aa 07 	call	0xf54	; 0xf54 <showFourthLevel>
		it = thirdLevelIt();
		
		else
		it = fourthLevelIt();
		
		for(u=0;u<it;u++)
    1b1e:	0f 5f       	subi	r16, 0xFF	; 255
    1b20:	1f 4f       	sbci	r17, 0xFF	; 255
    1b22:	0e 15       	cp	r16, r14
    1b24:	1f 05       	cpc	r17, r15
    1b26:	1c f0       	brlt	.+6      	; 0x1b2e <up+0x1d8>
    1b28:	0a c0       	rjmp	.+20     	; 0x1b3e <up+0x1e8>
		{
			for(i=0;i<wm_sz;i++)
    1b2a:	00 e0       	ldi	r16, 0x00	; 0
    1b2c:	10 e0       	ldi	r17, 0x00	; 0
    1b2e:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    1b32:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    1b36:	18 16       	cp	r1, r24
    1b38:	19 06       	cpc	r1, r25
    1b3a:	84 f2       	brlt	.-96     	; 0x1adc <up+0x186>
    1b3c:	dc cf       	rjmp	.-72     	; 0x1af6 <up+0x1a0>
		{
			offstate();
		}*/
		//_delay_ms(1);
	}
	status=2;
    1b3e:	82 e0       	ldi	r24, 0x02	; 2
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <status+0x1>
    1b46:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <status>
	//init_interrupts();

}
    1b4a:	0c c0       	rjmp	.+24     	; 0x1b64 <up+0x20e>
		int it;
		if(level<3)
		it = (int)round(iteration/wm_sz);
		
		else if(level == 3)
		it = thirdLevelIt();
    1b4c:	0f 2e       	mov	r0, r31
    1b4e:	f5 e0       	ldi	r31, 0x05	; 5
    1b50:	ef 2e       	mov	r14, r31
    1b52:	f1 2c       	mov	r15, r1
    1b54:	f0 2d       	mov	r31, r0
    1b56:	81 cf       	rjmp	.-254    	; 0x1a5a <up+0x104>
		int it;
		if(level<3)
		it = (int)round(iteration/wm_sz);
		
		else if(level == 3)
		it = thirdLevelIt();
    1b58:	0f 2e       	mov	r0, r31
    1b5a:	f5 e0       	ldi	r31, 0x05	; 5
    1b5c:	ef 2e       	mov	r14, r31
    1b5e:	f1 2c       	mov	r15, r1
    1b60:	f0 2d       	mov	r31, r0
    1b62:	e3 cf       	rjmp	.-58     	; 0x1b2a <up+0x1d4>
		//_delay_ms(1);
	}
	status=2;
	//init_interrupts();

}
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	1f 91       	pop	r17
    1b6a:	0f 91       	pop	r16
    1b6c:	ff 90       	pop	r15
    1b6e:	ef 90       	pop	r14
    1b70:	08 95       	ret

00001b72 <down>:

void down()
{
    1b72:	ef 92       	push	r14
    1b74:	ff 92       	push	r15
    1b76:	0f 93       	push	r16
    1b78:	1f 93       	push	r17
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
	sss=1;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <sss+0x1>
    1b86:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <sss>
	int i,u/*,off*/;
	int rowNo = rowCount(pos);
    1b8a:	c0 91 f3 01 	lds	r28, 0x01F3	; 0x8001f3 <pos>
    1b8e:	d0 91 f4 01 	lds	r29, 0x01F4	; 0x8001f4 <pos+0x1>
    1b92:	ce 01       	movw	r24, r28
    1b94:	0e 94 22 06 	call	0xc44	; 0xc44 <rowCount>
	
		if(rowNo==7 )//CHECK WHETHER POSITION IS DOWN EXTREMITY
    1b98:	07 97       	sbiw	r24, 0x07	; 7
    1b9a:	09 f0       	breq	.+2      	; 0x1b9e <down+0x2c>
    1b9c:	79 c0       	rjmp	.+242    	; 0x1c90 <down+0x11e>

		{
			
			if((pos>=57 && pos<=64) || (pos>=121 && pos<=128))
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	c9 97       	sbiw	r24, 0x39	; 57
    1ba2:	88 30       	cpi	r24, 0x08	; 8
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	20 f0       	brcs	.+8      	; 0x1bb0 <down+0x3e>
    1ba8:	80 54       	subi	r24, 0x40	; 64
    1baa:	91 09       	sbc	r25, r1
    1bac:	08 97       	sbiw	r24, 0x08	; 8
    1bae:	38 f4       	brcc	.+14     	; 0x1bbe <down+0x4c>
			pos=pos+72;
    1bb0:	c8 5b       	subi	r28, 0xB8	; 184
    1bb2:	df 4f       	sbci	r29, 0xFF	; 255
    1bb4:	d0 93 f4 01 	sts	0x01F4, r29	; 0x8001f4 <pos+0x1>
    1bb8:	c0 93 f3 01 	sts	0x01F3, r28	; 0x8001f3 <pos>
    1bbc:	06 c0       	rjmp	.+12     	; 0x1bca <down+0x58>

			else
			pos = pos - 184;
    1bbe:	c8 5b       	subi	r28, 0xB8	; 184
    1bc0:	d1 09       	sbc	r29, r1
    1bc2:	d0 93 f4 01 	sts	0x01F4, r29	; 0x8001f4 <pos+0x1>
    1bc6:	c0 93 f3 01 	sts	0x01F3, r28	; 0x8001f3 <pos>
			
			seedChange();
    1bca:	0e 94 c3 09 	call	0x1386	; 0x1386 <seedChange>
			shift();
    1bce:	0e 94 70 09 	call	0x12e0	; 0x12e0 <shift>
			
			int it;
			if(level<3)
    1bd2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    1bd6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    1bda:	83 30       	cpi	r24, 0x03	; 3
    1bdc:	91 05       	cpc	r25, r1
    1bde:	fc f4       	brge	.+62     	; 0x1c1e <down+0xac>
			it = (int)round(iteration/wm_sz);
    1be0:	60 91 c9 02 	lds	r22, 0x02C9	; 0x8002c9 <wm_sz>
    1be4:	70 91 ca 02 	lds	r23, 0x02CA	; 0x8002ca <wm_sz+0x1>
    1be8:	07 2e       	mov	r0, r23
    1bea:	00 0c       	add	r0, r0
    1bec:	88 0b       	sbc	r24, r24
    1bee:	99 0b       	sbc	r25, r25
    1bf0:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
    1bf4:	9b 01       	movw	r18, r22
    1bf6:	ac 01       	movw	r20, r24
    1bf8:	60 91 d1 00 	lds	r22, 0x00D1	; 0x8000d1 <iteration>
    1bfc:	70 91 d2 00 	lds	r23, 0x00D2	; 0x8000d2 <iteration+0x1>
    1c00:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <iteration+0x2>
    1c04:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <iteration+0x3>
    1c08:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__divsf3>
    1c0c:	0e 94 75 12 	call	0x24ea	; 0x24ea <round>
    1c10:	0e 94 c3 10 	call	0x2186	; 0x2186 <__fixsfsi>
    1c14:	7b 01       	movw	r14, r22
			it = thirdLevelIt();
			
			else
			it = fourthLevelIt();
			
			for(u=0;u<it;u++)
    1c16:	16 16       	cp	r1, r22
    1c18:	17 06       	cpc	r1, r23
    1c1a:	84 f1       	brlt	.+96     	; 0x1c7c <down+0x10a>
    1c1c:	a1 c0       	rjmp	.+322    	; 0x1d60 <down+0x1ee>
			
			int it;
			if(level<3)
			it = (int)round(iteration/wm_sz);
			
			else if(level == 3)
    1c1e:	03 97       	sbiw	r24, 0x03	; 3
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <down+0xb2>
    1c22:	a5 c0       	rjmp	.+330    	; 0x1d6e <down+0x1fc>
			it = thirdLevelIt();
			
			else
			it = fourthLevelIt();
    1c24:	68 94       	set
    1c26:	ee 24       	eor	r14, r14
    1c28:	e2 f8       	bld	r14, 2
    1c2a:	f1 2c       	mov	r15, r1
    1c2c:	27 c0       	rjmp	.+78     	; 0x1c7c <down+0x10a>
			
			for(u=0;u<it;u++)
			{
				for(i=0;i<wm_sz;i++)
    1c2e:	c0 e0       	ldi	r28, 0x00	; 0
    1c30:	d0 e0       	ldi	r29, 0x00	; 0
				{
					position(i);
    1c32:	ce 01       	movw	r24, r28
    1c34:	0e 94 b5 07 	call	0xf6a	; 0xf6a <position>
			else
			it = fourthLevelIt();
			
			for(u=0;u<it;u++)
			{
				for(i=0;i<wm_sz;i++)
    1c38:	21 96       	adiw	r28, 0x01	; 1
    1c3a:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    1c3e:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    1c42:	c8 17       	cp	r28, r24
    1c44:	d9 07       	cpc	r29, r25
    1c46:	ac f3       	brlt	.-22     	; 0x1c32 <down+0xc0>
				{
					position(i);
				//	seedPosition(seed);
				}
				//_delay_ms(delayVal);
				seedPosition(seed);
    1c48:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <seed>
    1c4c:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <seed+0x1>
    1c50:	0e 94 19 08 	call	0x1032	; 0x1032 <seedPosition>
				if(level==3)
    1c54:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    1c58:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    1c5c:	83 30       	cpi	r24, 0x03	; 3
    1c5e:	91 05       	cpc	r25, r1
    1c60:	19 f4       	brne	.+6      	; 0x1c68 <down+0xf6>
				showThirdLevel();
    1c62:	0e 94 91 07 	call	0xf22	; 0xf22 <showThirdLevel>
    1c66:	04 c0       	rjmp	.+8      	; 0x1c70 <down+0xfe>
				
				else if(level == 4)
    1c68:	04 97       	sbiw	r24, 0x04	; 4
    1c6a:	11 f4       	brne	.+4      	; 0x1c70 <down+0xfe>
				showFourthLevel();
    1c6c:	0e 94 aa 07 	call	0xf54	; 0xf54 <showFourthLevel>
			it = thirdLevelIt();
			
			else
			it = fourthLevelIt();
			
			for(u=0;u<it;u++)
    1c70:	0f 5f       	subi	r16, 0xFF	; 255
    1c72:	1f 4f       	sbci	r17, 0xFF	; 255
    1c74:	0e 15       	cp	r16, r14
    1c76:	1f 05       	cpc	r17, r15
    1c78:	1c f0       	brlt	.+6      	; 0x1c80 <down+0x10e>
    1c7a:	72 c0       	rjmp	.+228    	; 0x1d60 <down+0x1ee>
			{
				for(i=0;i<wm_sz;i++)
    1c7c:	00 e0       	ldi	r16, 0x00	; 0
    1c7e:	10 e0       	ldi	r17, 0x00	; 0
    1c80:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    1c84:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    1c88:	18 16       	cp	r1, r24
    1c8a:	19 06       	cpc	r1, r25
    1c8c:	84 f2       	brlt	.-96     	; 0x1c2e <down+0xbc>
    1c8e:	dc cf       	rjmp	.-72     	; 0x1c48 <down+0xd6>
			}
			//_delay_ms(1);
		}
		else
		{
			pos=pos+8;
    1c90:	28 96       	adiw	r28, 0x08	; 8
    1c92:	d0 93 f4 01 	sts	0x01F4, r29	; 0x8001f4 <pos+0x1>
    1c96:	c0 93 f3 01 	sts	0x01F3, r28	; 0x8001f3 <pos>
			seedChange();
    1c9a:	0e 94 c3 09 	call	0x1386	; 0x1386 <seedChange>
			shift();
    1c9e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <shift>
			
			int it;
			if(level<3)
    1ca2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    1ca6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    1caa:	83 30       	cpi	r24, 0x03	; 3
    1cac:	91 05       	cpc	r25, r1
    1cae:	fc f4       	brge	.+62     	; 0x1cee <down+0x17c>
			it = (int)round(iteration/wm_sz);
    1cb0:	60 91 c9 02 	lds	r22, 0x02C9	; 0x8002c9 <wm_sz>
    1cb4:	70 91 ca 02 	lds	r23, 0x02CA	; 0x8002ca <wm_sz+0x1>
    1cb8:	07 2e       	mov	r0, r23
    1cba:	00 0c       	add	r0, r0
    1cbc:	88 0b       	sbc	r24, r24
    1cbe:	99 0b       	sbc	r25, r25
    1cc0:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatsisf>
    1cc4:	9b 01       	movw	r18, r22
    1cc6:	ac 01       	movw	r20, r24
    1cc8:	60 91 d1 00 	lds	r22, 0x00D1	; 0x8000d1 <iteration>
    1ccc:	70 91 d2 00 	lds	r23, 0x00D2	; 0x8000d2 <iteration+0x1>
    1cd0:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <iteration+0x2>
    1cd4:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <iteration+0x3>
    1cd8:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__divsf3>
    1cdc:	0e 94 75 12 	call	0x24ea	; 0x24ea <round>
    1ce0:	0e 94 c3 10 	call	0x2186	; 0x2186 <__fixsfsi>
    1ce4:	7b 01       	movw	r14, r22
			it = thirdLevelIt();
			
			else
			it = fourthLevelIt();
			
			for(u=0;u<it;u++)
    1ce6:	16 16       	cp	r1, r22
    1ce8:	17 06       	cpc	r1, r23
    1cea:	84 f1       	brlt	.+96     	; 0x1d4c <down+0x1da>
    1cec:	39 c0       	rjmp	.+114    	; 0x1d60 <down+0x1ee>
			
			int it;
			if(level<3)
			it = (int)round(iteration/wm_sz);
			
			else if(level == 3)
    1cee:	03 97       	sbiw	r24, 0x03	; 3
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <down+0x182>
    1cf2:	43 c0       	rjmp	.+134    	; 0x1d7a <down+0x208>
			it = thirdLevelIt();
			
			else
			it = fourthLevelIt();
    1cf4:	68 94       	set
    1cf6:	ee 24       	eor	r14, r14
    1cf8:	e2 f8       	bld	r14, 2
    1cfa:	f1 2c       	mov	r15, r1
    1cfc:	27 c0       	rjmp	.+78     	; 0x1d4c <down+0x1da>
			
			for(u=0;u<it;u++)
			{
				for(i=0;i<wm_sz;i++)
    1cfe:	c0 e0       	ldi	r28, 0x00	; 0
    1d00:	d0 e0       	ldi	r29, 0x00	; 0
				{
					position(i);
    1d02:	ce 01       	movw	r24, r28
    1d04:	0e 94 b5 07 	call	0xf6a	; 0xf6a <position>
			else
			it = fourthLevelIt();
			
			for(u=0;u<it;u++)
			{
				for(i=0;i<wm_sz;i++)
    1d08:	21 96       	adiw	r28, 0x01	; 1
    1d0a:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    1d0e:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    1d12:	c8 17       	cp	r28, r24
    1d14:	d9 07       	cpc	r29, r25
    1d16:	ac f3       	brlt	.-22     	; 0x1d02 <down+0x190>
				{
					position(i);
					//seedPosition(seed);
				}
				//_delay_ms(delayVal);
				seedPosition(seed);
    1d18:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <seed>
    1d1c:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <seed+0x1>
    1d20:	0e 94 19 08 	call	0x1032	; 0x1032 <seedPosition>
				if(level==3)
    1d24:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <level>
    1d28:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <level+0x1>
    1d2c:	83 30       	cpi	r24, 0x03	; 3
    1d2e:	91 05       	cpc	r25, r1
    1d30:	19 f4       	brne	.+6      	; 0x1d38 <down+0x1c6>
				showThirdLevel();
    1d32:	0e 94 91 07 	call	0xf22	; 0xf22 <showThirdLevel>
    1d36:	04 c0       	rjmp	.+8      	; 0x1d40 <down+0x1ce>
				
				else if(level == 4)
    1d38:	04 97       	sbiw	r24, 0x04	; 4
    1d3a:	11 f4       	brne	.+4      	; 0x1d40 <down+0x1ce>
				showFourthLevel();
    1d3c:	0e 94 aa 07 	call	0xf54	; 0xf54 <showFourthLevel>
			it = thirdLevelIt();
			
			else
			it = fourthLevelIt();
			
			for(u=0;u<it;u++)
    1d40:	0f 5f       	subi	r16, 0xFF	; 255
    1d42:	1f 4f       	sbci	r17, 0xFF	; 255
    1d44:	0e 15       	cp	r16, r14
    1d46:	1f 05       	cpc	r17, r15
    1d48:	1c f0       	brlt	.+6      	; 0x1d50 <down+0x1de>
    1d4a:	0a c0       	rjmp	.+20     	; 0x1d60 <down+0x1ee>
			{
				for(i=0;i<wm_sz;i++)
    1d4c:	00 e0       	ldi	r16, 0x00	; 0
    1d4e:	10 e0       	ldi	r17, 0x00	; 0
    1d50:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <wm_sz>
    1d54:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <wm_sz+0x1>
    1d58:	18 16       	cp	r1, r24
    1d5a:	19 06       	cpc	r1, r25
    1d5c:	84 f2       	brlt	.-96     	; 0x1cfe <down+0x18c>
    1d5e:	dc cf       	rjmp	.-72     	; 0x1d18 <down+0x1a6>
			{
				offstate();
			}*/
			//_delay_ms(1);
		}
		status=4;
    1d60:	84 e0       	ldi	r24, 0x04	; 4
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <status+0x1>
    1d68:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <status>
		//init_interrupts();

}
    1d6c:	0c c0       	rjmp	.+24     	; 0x1d86 <down+0x214>
			int it;
			if(level<3)
			it = (int)round(iteration/wm_sz);
			
			else if(level == 3)
			it = thirdLevelIt();
    1d6e:	0f 2e       	mov	r0, r31
    1d70:	f5 e0       	ldi	r31, 0x05	; 5
    1d72:	ef 2e       	mov	r14, r31
    1d74:	f1 2c       	mov	r15, r1
    1d76:	f0 2d       	mov	r31, r0
    1d78:	81 cf       	rjmp	.-254    	; 0x1c7c <down+0x10a>
			int it;
			if(level<3)
			it = (int)round(iteration/wm_sz);
			
			else if(level == 3)
			it = thirdLevelIt();
    1d7a:	0f 2e       	mov	r0, r31
    1d7c:	f5 e0       	ldi	r31, 0x05	; 5
    1d7e:	ef 2e       	mov	r14, r31
    1d80:	f1 2c       	mov	r15, r1
    1d82:	f0 2d       	mov	r31, r0
    1d84:	e3 cf       	rjmp	.-58     	; 0x1d4c <down+0x1da>
			//_delay_ms(1);
		}
		status=4;
		//init_interrupts();

}
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	ff 90       	pop	r15
    1d90:	ef 90       	pop	r14
    1d92:	08 95       	ret

00001d94 <mover>:




void mover()
{
    1d94:	8f 92       	push	r8
    1d96:	9f 92       	push	r9
    1d98:	af 92       	push	r10
    1d9a:	bf 92       	push	r11
    1d9c:	cf 92       	push	r12
    1d9e:	df 92       	push	r13
    1da0:	ef 92       	push	r14
    1da2:	ff 92       	push	r15
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
	Read_RawValue(&Acc_x, &Acc_y, &Acc_z, &Temperature, &Gyro_x, &Gyro_y, &Gyro_z);
    1da8:	0f 2e       	mov	r0, r31
    1daa:	f1 ed       	ldi	r31, 0xD1	; 209
    1dac:	cf 2e       	mov	r12, r31
    1dae:	f2 e0       	ldi	r31, 0x02	; 2
    1db0:	df 2e       	mov	r13, r31
    1db2:	f0 2d       	mov	r31, r0
    1db4:	0f 2e       	mov	r0, r31
    1db6:	f7 ee       	ldi	r31, 0xE7	; 231
    1db8:	ef 2e       	mov	r14, r31
    1dba:	f2 e0       	ldi	r31, 0x02	; 2
    1dbc:	ff 2e       	mov	r15, r31
    1dbe:	f0 2d       	mov	r31, r0
    1dc0:	0b ee       	ldi	r16, 0xEB	; 235
    1dc2:	11 e0       	ldi	r17, 0x01	; 1
    1dc4:	2f ee       	ldi	r18, 0xEF	; 239
    1dc6:	31 e0       	ldi	r19, 0x01	; 1
    1dc8:	43 ee       	ldi	r20, 0xE3	; 227
    1dca:	50 e0       	ldi	r21, 0x00	; 0
    1dcc:	65 ef       	ldi	r22, 0xF5	; 245
    1dce:	71 e0       	ldi	r23, 0x01	; 1
    1dd0:	85 ed       	ldi	r24, 0xD5	; 213
    1dd2:	92 e0       	ldi	r25, 0x02	; 2
    1dd4:	0e 94 a2 02 	call	0x544	; 0x544 <Read_RawValue>

	// Divide raw value by sensitivity scale factor
	Xa = Acc_x/16384.0;
	Ya = Acc_y/16384.0;
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	58 e3       	ldi	r21, 0x38	; 56
    1de0:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <Acc_y>
    1de4:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <Acc_y+0x1>
    1de8:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <Acc_y+0x2>
    1dec:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <Acc_y+0x3>
    1df0:	0e 94 08 12 	call	0x2410	; 0x2410 <__mulsf3>
    1df4:	6b 01       	movw	r12, r22
    1df6:	7c 01       	movw	r14, r24
	//Za = Acc_z/16384.0;

	Xa=Xa*9.8;
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e8       	ldi	r20, 0x80	; 128
    1dfe:	58 e3       	ldi	r21, 0x38	; 56
    1e00:	60 91 d5 02 	lds	r22, 0x02D5	; 0x8002d5 <Acc_x>
    1e04:	70 91 d6 02 	lds	r23, 0x02D6	; 0x8002d6 <Acc_x+0x1>
    1e08:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <Acc_x+0x2>
    1e0c:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <Acc_x+0x3>
    1e10:	0e 94 08 12 	call	0x2410	; 0x2410 <__mulsf3>
    1e14:	2d ec       	ldi	r18, 0xCD	; 205
    1e16:	3c ec       	ldi	r19, 0xCC	; 204
    1e18:	4c e1       	ldi	r20, 0x1C	; 28
    1e1a:	51 e4       	ldi	r21, 0x41	; 65
    1e1c:	0e 94 08 12 	call	0x2410	; 0x2410 <__mulsf3>
    1e20:	4b 01       	movw	r8, r22
    1e22:	5c 01       	movw	r10, r24
    1e24:	60 93 d9 02 	sts	0x02D9, r22	; 0x8002d9 <Xa>
    1e28:	70 93 da 02 	sts	0x02DA, r23	; 0x8002da <Xa+0x1>
    1e2c:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <Xa+0x2>
    1e30:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <Xa+0x3>
	Ya=Ya*9.8;
    1e34:	2d ec       	ldi	r18, 0xCD	; 205
    1e36:	3c ec       	ldi	r19, 0xCC	; 204
    1e38:	4c e1       	ldi	r20, 0x1C	; 28
    1e3a:	51 e4       	ldi	r21, 0x41	; 65
    1e3c:	c7 01       	movw	r24, r14
    1e3e:	b6 01       	movw	r22, r12
    1e40:	0e 94 08 12 	call	0x2410	; 0x2410 <__mulsf3>
    1e44:	6b 01       	movw	r12, r22
    1e46:	7c 01       	movw	r14, r24
    1e48:	60 93 dd 02 	sts	0x02DD, r22	; 0x8002dd <Ya>
    1e4c:	70 93 de 02 	sts	0x02DE, r23	; 0x8002de <Ya+0x1>
    1e50:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <Ya+0x2>
    1e54:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <Ya+0x3>
	//Za *=g;
	

	Xg = Gyro_x/16.4;
    1e58:	23 e3       	ldi	r18, 0x33	; 51
    1e5a:	33 e3       	ldi	r19, 0x33	; 51
    1e5c:	43 e8       	ldi	r20, 0x83	; 131
    1e5e:	51 e4       	ldi	r21, 0x41	; 65
    1e60:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <Gyro_x>
    1e64:	70 91 ec 01 	lds	r23, 0x01EC	; 0x8001ec <Gyro_x+0x1>
    1e68:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <Gyro_x+0x2>
    1e6c:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <Gyro_x+0x3>
    1e70:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__divsf3>
    1e74:	60 93 df 00 	sts	0x00DF, r22	; 0x8000df <Xg>
    1e78:	70 93 e0 00 	sts	0x00E0, r23	; 0x8000e0 <Xg+0x1>
    1e7c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <Xg+0x2>
    1e80:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <Xg+0x3>
	Yg = Gyro_y/16.4;
    1e84:	23 e3       	ldi	r18, 0x33	; 51
    1e86:	33 e3       	ldi	r19, 0x33	; 51
    1e88:	43 e8       	ldi	r20, 0x83	; 131
    1e8a:	51 e4       	ldi	r21, 0x41	; 65
    1e8c:	60 91 e7 02 	lds	r22, 0x02E7	; 0x8002e7 <Gyro_y>
    1e90:	70 91 e8 02 	lds	r23, 0x02E8	; 0x8002e8 <Gyro_y+0x1>
    1e94:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <Gyro_y+0x2>
    1e98:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <Gyro_y+0x3>
    1e9c:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__divsf3>
    1ea0:	60 93 db 00 	sts	0x00DB, r22	; 0x8000db <Yg>
    1ea4:	70 93 dc 00 	sts	0x00DC, r23	; 0x8000dc <Yg+0x1>
    1ea8:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <Yg+0x2>
    1eac:	90 93 de 00 	sts	0x00DE, r25	; 0x8000de <Yg+0x3>
	Zg = Gyro_z/16.4; 
    1eb0:	23 e3       	ldi	r18, 0x33	; 51
    1eb2:	33 e3       	ldi	r19, 0x33	; 51
    1eb4:	43 e8       	ldi	r20, 0x83	; 131
    1eb6:	51 e4       	ldi	r21, 0x41	; 65
    1eb8:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <Gyro_z>
    1ebc:	70 91 d2 02 	lds	r23, 0x02D2	; 0x8002d2 <Gyro_z+0x1>
    1ec0:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <Gyro_z+0x2>
    1ec4:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <Gyro_z+0x3>
    1ec8:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__divsf3>
    1ecc:	60 93 d7 00 	sts	0x00D7, r22	; 0x8000d7 <Zg>
    1ed0:	70 93 d8 00 	sts	0x00D8, r23	; 0x8000d8 <Zg+0x1>
    1ed4:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <Zg+0x2>
    1ed8:	90 93 da 00 	sts	0x00DA, r25	; 0x8000da <Zg+0x3>
	
	
	if(Ya<-3.0 && moveDir != rightDir)
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e4       	ldi	r20, 0x40	; 64
    1ee2:	50 ec       	ldi	r21, 0xC0	; 192
    1ee4:	c7 01       	movw	r24, r14
    1ee6:	b6 01       	movw	r22, r12
    1ee8:	0e 94 4c 10 	call	0x2098	; 0x2098 <__cmpsf2>
    1eec:	88 23       	and	r24, r24
    1eee:	74 f4       	brge	.+28     	; 0x1f0c <mover+0x178>
    1ef0:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <moveDir>
    1ef4:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <moveDir+0x1>
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	09 f4       	brne	.+2      	; 0x1efe <mover+0x16a>
    1efc:	6a c0       	rjmp	.+212    	; 0x1fd2 <mover+0x23e>
	moveDir = leftDir;
    1efe:	82 e0       	ldi	r24, 0x02	; 2
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <moveDir+0x1>
    1f06:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <moveDir>
    1f0a:	54 c0       	rjmp	.+168    	; 0x1fb4 <mover+0x220>

	else if (Ya>3.0 && moveDir != leftDir)
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e4       	ldi	r20, 0x40	; 64
    1f12:	50 e4       	ldi	r21, 0x40	; 64
    1f14:	c7 01       	movw	r24, r14
    1f16:	b6 01       	movw	r22, r12
    1f18:	0e 94 03 12 	call	0x2406	; 0x2406 <__gesf2>
    1f1c:	18 16       	cp	r1, r24
    1f1e:	74 f4       	brge	.+28     	; 0x1f3c <mover+0x1a8>
    1f20:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <moveDir>
    1f24:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <moveDir+0x1>
    1f28:	02 97       	sbiw	r24, 0x02	; 2
    1f2a:	09 f4       	brne	.+2      	; 0x1f2e <mover+0x19a>
    1f2c:	5e c0       	rjmp	.+188    	; 0x1fea <mover+0x256>
	moveDir = rightDir;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <moveDir+0x1>
    1f36:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <moveDir>
    1f3a:	36 c0       	rjmp	.+108    	; 0x1fa8 <mover+0x214>

	else if(Xa>3.0 && moveDir != downDir)
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	40 e4       	ldi	r20, 0x40	; 64
    1f42:	50 e4       	ldi	r21, 0x40	; 64
    1f44:	c5 01       	movw	r24, r10
    1f46:	b4 01       	movw	r22, r8
    1f48:	0e 94 03 12 	call	0x2406	; 0x2406 <__gesf2>
    1f4c:	18 16       	cp	r1, r24
    1f4e:	74 f4       	brge	.+28     	; 0x1f6c <mover+0x1d8>
    1f50:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <moveDir>
    1f54:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <moveDir+0x1>
    1f58:	04 97       	sbiw	r24, 0x04	; 4
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <mover+0x1ca>
    1f5c:	52 c0       	rjmp	.+164    	; 0x2002 <mover+0x26e>
	moveDir = upDir;
    1f5e:	83 e0       	ldi	r24, 0x03	; 3
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <moveDir+0x1>
    1f66:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <moveDir>
    1f6a:	2a c0       	rjmp	.+84     	; 0x1fc0 <mover+0x22c>

	else if(Xa<-3.0 && moveDir != upDir)
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e4       	ldi	r20, 0x40	; 64
    1f72:	50 ec       	ldi	r21, 0xC0	; 192
    1f74:	c5 01       	movw	r24, r10
    1f76:	b4 01       	movw	r22, r8
    1f78:	0e 94 4c 10 	call	0x2098	; 0x2098 <__cmpsf2>
    1f7c:	88 23       	and	r24, r24
    1f7e:	6c f4       	brge	.+26     	; 0x1f9a <mover+0x206>
    1f80:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <moveDir>
    1f84:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <moveDir+0x1>
    1f88:	03 97       	sbiw	r24, 0x03	; 3
    1f8a:	d1 f0       	breq	.+52     	; 0x1fc0 <mover+0x22c>
	moveDir = downDir;
    1f8c:	84 e0       	ldi	r24, 0x04	; 4
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <moveDir+0x1>
    1f94:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <moveDir>
    1f98:	19 c0       	rjmp	.+50     	; 0x1fcc <mover+0x238>

	if(moveDir == rightDir)
    1f9a:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <moveDir>
    1f9e:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <moveDir+0x1>
    1fa2:	81 30       	cpi	r24, 0x01	; 1
    1fa4:	91 05       	cpc	r25, r1
    1fa6:	19 f4       	brne	.+6      	; 0x1fae <mover+0x21a>
		right();
    1fa8:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <right>
    1fac:	4e c0       	rjmp	.+156    	; 0x204a <mover+0x2b6>

	else if(moveDir == leftDir)
    1fae:	82 30       	cpi	r24, 0x02	; 2
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	19 f4       	brne	.+6      	; 0x1fba <mover+0x226>
		left();
    1fb4:	0e 94 94 0b 	call	0x1728	; 0x1728 <left>
    1fb8:	48 c0       	rjmp	.+144    	; 0x204a <mover+0x2b6>

	else if(moveDir == upDir)
    1fba:	83 30       	cpi	r24, 0x03	; 3
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	19 f4       	brne	.+6      	; 0x1fc6 <mover+0x232>
	up();
    1fc0:	0e 94 ab 0c 	call	0x1956	; 0x1956 <up>
    1fc4:	42 c0       	rjmp	.+132    	; 0x204a <mover+0x2b6>

	else if(moveDir == downDir)
    1fc6:	04 97       	sbiw	r24, 0x04	; 4
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <mover+0x238>
    1fca:	3f c0       	rjmp	.+126    	; 0x204a <mover+0x2b6>
	down();
    1fcc:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <down>
	
	//Xa=0.0;
	//Ya=0.0;

	//_delay_ms(100);
}
    1fd0:	3c c0       	rjmp	.+120    	; 0x204a <mover+0x2b6>
	
	
	if(Ya<-3.0 && moveDir != rightDir)
	moveDir = leftDir;

	else if (Ya>3.0 && moveDir != leftDir)
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e4       	ldi	r20, 0x40	; 64
    1fd8:	50 e4       	ldi	r21, 0x40	; 64
    1fda:	c7 01       	movw	r24, r14
    1fdc:	b6 01       	movw	r22, r12
    1fde:	0e 94 03 12 	call	0x2406	; 0x2406 <__gesf2>
    1fe2:	18 16       	cp	r1, r24
    1fe4:	0c f4       	brge	.+2      	; 0x1fe8 <mover+0x254>
    1fe6:	a3 cf       	rjmp	.-186    	; 0x1f2e <mover+0x19a>
    1fe8:	18 c0       	rjmp	.+48     	; 0x201a <mover+0x286>
	moveDir = rightDir;

	else if(Xa>3.0 && moveDir != downDir)
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e4       	ldi	r20, 0x40	; 64
    1ff0:	50 e4       	ldi	r21, 0x40	; 64
    1ff2:	c5 01       	movw	r24, r10
    1ff4:	b4 01       	movw	r22, r8
    1ff6:	0e 94 03 12 	call	0x2406	; 0x2406 <__gesf2>
    1ffa:	18 16       	cp	r1, r24
    1ffc:	0c f4       	brge	.+2      	; 0x2000 <mover+0x26c>
    1ffe:	af cf       	rjmp	.-162    	; 0x1f5e <mover+0x1ca>
    2000:	18 c0       	rjmp	.+48     	; 0x2032 <mover+0x29e>
	moveDir = upDir;

	else if(Xa<-3.0 && moveDir != upDir)
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e4       	ldi	r20, 0x40	; 64
    2008:	50 ec       	ldi	r21, 0xC0	; 192
    200a:	c5 01       	movw	r24, r10
    200c:	b4 01       	movw	r22, r8
    200e:	0e 94 4c 10 	call	0x2098	; 0x2098 <__cmpsf2>
    2012:	88 23       	and	r24, r24
    2014:	0c f4       	brge	.+2      	; 0x2018 <mover+0x284>
    2016:	ba cf       	rjmp	.-140    	; 0x1f8c <mover+0x1f8>
    2018:	d9 cf       	rjmp	.-78     	; 0x1fcc <mover+0x238>
	moveDir = leftDir;

	else if (Ya>3.0 && moveDir != leftDir)
	moveDir = rightDir;

	else if(Xa>3.0 && moveDir != downDir)
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e4       	ldi	r20, 0x40	; 64
    2020:	50 e4       	ldi	r21, 0x40	; 64
    2022:	c5 01       	movw	r24, r10
    2024:	b4 01       	movw	r22, r8
    2026:	0e 94 03 12 	call	0x2406	; 0x2406 <__gesf2>
    202a:	18 16       	cp	r1, r24
    202c:	0c f4       	brge	.+2      	; 0x2030 <mover+0x29c>
    202e:	97 cf       	rjmp	.-210    	; 0x1f5e <mover+0x1ca>
    2030:	9d cf       	rjmp	.-198    	; 0x1f6c <mover+0x1d8>
	moveDir = upDir;

	else if(Xa<-3.0 && moveDir != upDir)
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e4       	ldi	r20, 0x40	; 64
    2038:	50 ec       	ldi	r21, 0xC0	; 192
    203a:	c5 01       	movw	r24, r10
    203c:	b4 01       	movw	r22, r8
    203e:	0e 94 4c 10 	call	0x2098	; 0x2098 <__cmpsf2>
    2042:	88 23       	and	r24, r24
    2044:	0c f4       	brge	.+2      	; 0x2048 <mover+0x2b4>
    2046:	a2 cf       	rjmp	.-188    	; 0x1f8c <mover+0x1f8>
    2048:	a8 cf       	rjmp	.-176    	; 0x1f9a <mover+0x206>
	
	//Xa=0.0;
	//Ya=0.0;

	//_delay_ms(100);
}
    204a:	1f 91       	pop	r17
    204c:	0f 91       	pop	r16
    204e:	ff 90       	pop	r15
    2050:	ef 90       	pop	r14
    2052:	df 90       	pop	r13
    2054:	cf 90       	pop	r12
    2056:	bf 90       	pop	r11
    2058:	af 90       	pop	r10
    205a:	9f 90       	pop	r9
    205c:	8f 90       	pop	r8
    205e:	08 95       	ret

00002060 <main>:
	//Lcd8_Init();
	//Lcd8_Set_Cursor(1,1);
	//Lcd8_Write_String("Game On");
	//_delay_ms(2000);
	
	initialize();
    2060:	0e 94 9a 08 	call	0x1134	; 0x1134 <initialize>
		
		
		//Lcd8_Write_String("Game On");
		//_delay_ms(2000);
		
		mover();
    2064:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <mover>
    2068:	fd cf       	rjmp	.-6      	; 0x2064 <main+0x4>

0000206a <ceil>:
    206a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__fp_trunc>
    206e:	90 f0       	brcs	.+36     	; 0x2094 <ceil+0x2a>
    2070:	9f 37       	cpi	r25, 0x7F	; 127
    2072:	48 f4       	brcc	.+18     	; 0x2086 <ceil+0x1c>
    2074:	91 11       	cpse	r25, r1
    2076:	16 f4       	brtc	.+4      	; 0x207c <ceil+0x12>
    2078:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__fp_szero>
    207c:	60 e0       	ldi	r22, 0x00	; 0
    207e:	70 e0       	ldi	r23, 0x00	; 0
    2080:	80 e8       	ldi	r24, 0x80	; 128
    2082:	9f e3       	ldi	r25, 0x3F	; 63
    2084:	08 95       	ret
    2086:	26 f0       	brts	.+8      	; 0x2090 <ceil+0x26>
    2088:	1b 16       	cp	r1, r27
    208a:	61 1d       	adc	r22, r1
    208c:	71 1d       	adc	r23, r1
    208e:	81 1d       	adc	r24, r1
    2090:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__fp_mintl>
    2094:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__fp_mpack>

00002098 <__cmpsf2>:
    2098:	0e 94 4d 11 	call	0x229a	; 0x229a <__fp_cmp>
    209c:	08 f4       	brcc	.+2      	; 0x20a0 <__cmpsf2+0x8>
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	08 95       	ret

000020a2 <__divsf3>:
    20a2:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divsf3x>
    20a6:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__fp_round>
    20aa:	0e 94 aa 11 	call	0x2354	; 0x2354 <__fp_pscB>
    20ae:	58 f0       	brcs	.+22     	; 0x20c6 <__divsf3+0x24>
    20b0:	0e 94 a3 11 	call	0x2346	; 0x2346 <__fp_pscA>
    20b4:	40 f0       	brcs	.+16     	; 0x20c6 <__divsf3+0x24>
    20b6:	29 f4       	brne	.+10     	; 0x20c2 <__divsf3+0x20>
    20b8:	5f 3f       	cpi	r21, 0xFF	; 255
    20ba:	29 f0       	breq	.+10     	; 0x20c6 <__divsf3+0x24>
    20bc:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__fp_inf>
    20c0:	51 11       	cpse	r21, r1
    20c2:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__fp_szero>
    20c6:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__fp_nan>

000020ca <__divsf3x>:
    20ca:	0e 94 c2 11 	call	0x2384	; 0x2384 <__fp_split3>
    20ce:	68 f3       	brcs	.-38     	; 0x20aa <__divsf3+0x8>

000020d0 <__divsf3_pse>:
    20d0:	99 23       	and	r25, r25
    20d2:	b1 f3       	breq	.-20     	; 0x20c0 <__divsf3+0x1e>
    20d4:	55 23       	and	r21, r21
    20d6:	91 f3       	breq	.-28     	; 0x20bc <__divsf3+0x1a>
    20d8:	95 1b       	sub	r25, r21
    20da:	55 0b       	sbc	r21, r21
    20dc:	bb 27       	eor	r27, r27
    20de:	aa 27       	eor	r26, r26
    20e0:	62 17       	cp	r22, r18
    20e2:	73 07       	cpc	r23, r19
    20e4:	84 07       	cpc	r24, r20
    20e6:	38 f0       	brcs	.+14     	; 0x20f6 <__divsf3_pse+0x26>
    20e8:	9f 5f       	subi	r25, 0xFF	; 255
    20ea:	5f 4f       	sbci	r21, 0xFF	; 255
    20ec:	22 0f       	add	r18, r18
    20ee:	33 1f       	adc	r19, r19
    20f0:	44 1f       	adc	r20, r20
    20f2:	aa 1f       	adc	r26, r26
    20f4:	a9 f3       	breq	.-22     	; 0x20e0 <__divsf3_pse+0x10>
    20f6:	35 d0       	rcall	.+106    	; 0x2162 <__divsf3_pse+0x92>
    20f8:	0e 2e       	mov	r0, r30
    20fa:	3a f0       	brmi	.+14     	; 0x210a <__divsf3_pse+0x3a>
    20fc:	e0 e8       	ldi	r30, 0x80	; 128
    20fe:	32 d0       	rcall	.+100    	; 0x2164 <__divsf3_pse+0x94>
    2100:	91 50       	subi	r25, 0x01	; 1
    2102:	50 40       	sbci	r21, 0x00	; 0
    2104:	e6 95       	lsr	r30
    2106:	00 1c       	adc	r0, r0
    2108:	ca f7       	brpl	.-14     	; 0x20fc <__divsf3_pse+0x2c>
    210a:	2b d0       	rcall	.+86     	; 0x2162 <__divsf3_pse+0x92>
    210c:	fe 2f       	mov	r31, r30
    210e:	29 d0       	rcall	.+82     	; 0x2162 <__divsf3_pse+0x92>
    2110:	66 0f       	add	r22, r22
    2112:	77 1f       	adc	r23, r23
    2114:	88 1f       	adc	r24, r24
    2116:	bb 1f       	adc	r27, r27
    2118:	26 17       	cp	r18, r22
    211a:	37 07       	cpc	r19, r23
    211c:	48 07       	cpc	r20, r24
    211e:	ab 07       	cpc	r26, r27
    2120:	b0 e8       	ldi	r27, 0x80	; 128
    2122:	09 f0       	breq	.+2      	; 0x2126 <__divsf3_pse+0x56>
    2124:	bb 0b       	sbc	r27, r27
    2126:	80 2d       	mov	r24, r0
    2128:	bf 01       	movw	r22, r30
    212a:	ff 27       	eor	r31, r31
    212c:	93 58       	subi	r25, 0x83	; 131
    212e:	5f 4f       	sbci	r21, 0xFF	; 255
    2130:	3a f0       	brmi	.+14     	; 0x2140 <__divsf3_pse+0x70>
    2132:	9e 3f       	cpi	r25, 0xFE	; 254
    2134:	51 05       	cpc	r21, r1
    2136:	78 f0       	brcs	.+30     	; 0x2156 <__divsf3_pse+0x86>
    2138:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__fp_inf>
    213c:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__fp_szero>
    2140:	5f 3f       	cpi	r21, 0xFF	; 255
    2142:	e4 f3       	brlt	.-8      	; 0x213c <__divsf3_pse+0x6c>
    2144:	98 3e       	cpi	r25, 0xE8	; 232
    2146:	d4 f3       	brlt	.-12     	; 0x213c <__divsf3_pse+0x6c>
    2148:	86 95       	lsr	r24
    214a:	77 95       	ror	r23
    214c:	67 95       	ror	r22
    214e:	b7 95       	ror	r27
    2150:	f7 95       	ror	r31
    2152:	9f 5f       	subi	r25, 0xFF	; 255
    2154:	c9 f7       	brne	.-14     	; 0x2148 <__divsf3_pse+0x78>
    2156:	88 0f       	add	r24, r24
    2158:	91 1d       	adc	r25, r1
    215a:	96 95       	lsr	r25
    215c:	87 95       	ror	r24
    215e:	97 f9       	bld	r25, 7
    2160:	08 95       	ret
    2162:	e1 e0       	ldi	r30, 0x01	; 1
    2164:	66 0f       	add	r22, r22
    2166:	77 1f       	adc	r23, r23
    2168:	88 1f       	adc	r24, r24
    216a:	bb 1f       	adc	r27, r27
    216c:	62 17       	cp	r22, r18
    216e:	73 07       	cpc	r23, r19
    2170:	84 07       	cpc	r24, r20
    2172:	ba 07       	cpc	r27, r26
    2174:	20 f0       	brcs	.+8      	; 0x217e <__divsf3_pse+0xae>
    2176:	62 1b       	sub	r22, r18
    2178:	73 0b       	sbc	r23, r19
    217a:	84 0b       	sbc	r24, r20
    217c:	ba 0b       	sbc	r27, r26
    217e:	ee 1f       	adc	r30, r30
    2180:	88 f7       	brcc	.-30     	; 0x2164 <__divsf3_pse+0x94>
    2182:	e0 95       	com	r30
    2184:	08 95       	ret

00002186 <__fixsfsi>:
    2186:	0e 94 ca 10 	call	0x2194	; 0x2194 <__fixunssfsi>
    218a:	68 94       	set
    218c:	b1 11       	cpse	r27, r1
    218e:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__fp_szero>
    2192:	08 95       	ret

00002194 <__fixunssfsi>:
    2194:	0e 94 ca 11 	call	0x2394	; 0x2394 <__fp_splitA>
    2198:	88 f0       	brcs	.+34     	; 0x21bc <__fixunssfsi+0x28>
    219a:	9f 57       	subi	r25, 0x7F	; 127
    219c:	98 f0       	brcs	.+38     	; 0x21c4 <__fixunssfsi+0x30>
    219e:	b9 2f       	mov	r27, r25
    21a0:	99 27       	eor	r25, r25
    21a2:	b7 51       	subi	r27, 0x17	; 23
    21a4:	b0 f0       	brcs	.+44     	; 0x21d2 <__fixunssfsi+0x3e>
    21a6:	e1 f0       	breq	.+56     	; 0x21e0 <__fixunssfsi+0x4c>
    21a8:	66 0f       	add	r22, r22
    21aa:	77 1f       	adc	r23, r23
    21ac:	88 1f       	adc	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	1a f0       	brmi	.+6      	; 0x21b8 <__fixunssfsi+0x24>
    21b2:	ba 95       	dec	r27
    21b4:	c9 f7       	brne	.-14     	; 0x21a8 <__fixunssfsi+0x14>
    21b6:	14 c0       	rjmp	.+40     	; 0x21e0 <__fixunssfsi+0x4c>
    21b8:	b1 30       	cpi	r27, 0x01	; 1
    21ba:	91 f0       	breq	.+36     	; 0x21e0 <__fixunssfsi+0x4c>
    21bc:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__fp_zero>
    21c0:	b1 e0       	ldi	r27, 0x01	; 1
    21c2:	08 95       	ret
    21c4:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__fp_zero>
    21c8:	67 2f       	mov	r22, r23
    21ca:	78 2f       	mov	r23, r24
    21cc:	88 27       	eor	r24, r24
    21ce:	b8 5f       	subi	r27, 0xF8	; 248
    21d0:	39 f0       	breq	.+14     	; 0x21e0 <__fixunssfsi+0x4c>
    21d2:	b9 3f       	cpi	r27, 0xF9	; 249
    21d4:	cc f3       	brlt	.-14     	; 0x21c8 <__fixunssfsi+0x34>
    21d6:	86 95       	lsr	r24
    21d8:	77 95       	ror	r23
    21da:	67 95       	ror	r22
    21dc:	b3 95       	inc	r27
    21de:	d9 f7       	brne	.-10     	; 0x21d6 <__fixunssfsi+0x42>
    21e0:	3e f4       	brtc	.+14     	; 0x21f0 <__fixunssfsi+0x5c>
    21e2:	90 95       	com	r25
    21e4:	80 95       	com	r24
    21e6:	70 95       	com	r23
    21e8:	61 95       	neg	r22
    21ea:	7f 4f       	sbci	r23, 0xFF	; 255
    21ec:	8f 4f       	sbci	r24, 0xFF	; 255
    21ee:	9f 4f       	sbci	r25, 0xFF	; 255
    21f0:	08 95       	ret

000021f2 <__floatunsisf>:
    21f2:	e8 94       	clt
    21f4:	09 c0       	rjmp	.+18     	; 0x2208 <__floatsisf+0x12>

000021f6 <__floatsisf>:
    21f6:	97 fb       	bst	r25, 7
    21f8:	3e f4       	brtc	.+14     	; 0x2208 <__floatsisf+0x12>
    21fa:	90 95       	com	r25
    21fc:	80 95       	com	r24
    21fe:	70 95       	com	r23
    2200:	61 95       	neg	r22
    2202:	7f 4f       	sbci	r23, 0xFF	; 255
    2204:	8f 4f       	sbci	r24, 0xFF	; 255
    2206:	9f 4f       	sbci	r25, 0xFF	; 255
    2208:	99 23       	and	r25, r25
    220a:	a9 f0       	breq	.+42     	; 0x2236 <__floatsisf+0x40>
    220c:	f9 2f       	mov	r31, r25
    220e:	96 e9       	ldi	r25, 0x96	; 150
    2210:	bb 27       	eor	r27, r27
    2212:	93 95       	inc	r25
    2214:	f6 95       	lsr	r31
    2216:	87 95       	ror	r24
    2218:	77 95       	ror	r23
    221a:	67 95       	ror	r22
    221c:	b7 95       	ror	r27
    221e:	f1 11       	cpse	r31, r1
    2220:	f8 cf       	rjmp	.-16     	; 0x2212 <__floatsisf+0x1c>
    2222:	fa f4       	brpl	.+62     	; 0x2262 <__floatsisf+0x6c>
    2224:	bb 0f       	add	r27, r27
    2226:	11 f4       	brne	.+4      	; 0x222c <__floatsisf+0x36>
    2228:	60 ff       	sbrs	r22, 0
    222a:	1b c0       	rjmp	.+54     	; 0x2262 <__floatsisf+0x6c>
    222c:	6f 5f       	subi	r22, 0xFF	; 255
    222e:	7f 4f       	sbci	r23, 0xFF	; 255
    2230:	8f 4f       	sbci	r24, 0xFF	; 255
    2232:	9f 4f       	sbci	r25, 0xFF	; 255
    2234:	16 c0       	rjmp	.+44     	; 0x2262 <__floatsisf+0x6c>
    2236:	88 23       	and	r24, r24
    2238:	11 f0       	breq	.+4      	; 0x223e <__floatsisf+0x48>
    223a:	96 e9       	ldi	r25, 0x96	; 150
    223c:	11 c0       	rjmp	.+34     	; 0x2260 <__floatsisf+0x6a>
    223e:	77 23       	and	r23, r23
    2240:	21 f0       	breq	.+8      	; 0x224a <__floatsisf+0x54>
    2242:	9e e8       	ldi	r25, 0x8E	; 142
    2244:	87 2f       	mov	r24, r23
    2246:	76 2f       	mov	r23, r22
    2248:	05 c0       	rjmp	.+10     	; 0x2254 <__floatsisf+0x5e>
    224a:	66 23       	and	r22, r22
    224c:	71 f0       	breq	.+28     	; 0x226a <__floatsisf+0x74>
    224e:	96 e8       	ldi	r25, 0x86	; 134
    2250:	86 2f       	mov	r24, r22
    2252:	70 e0       	ldi	r23, 0x00	; 0
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	2a f0       	brmi	.+10     	; 0x2262 <__floatsisf+0x6c>
    2258:	9a 95       	dec	r25
    225a:	66 0f       	add	r22, r22
    225c:	77 1f       	adc	r23, r23
    225e:	88 1f       	adc	r24, r24
    2260:	da f7       	brpl	.-10     	; 0x2258 <__floatsisf+0x62>
    2262:	88 0f       	add	r24, r24
    2264:	96 95       	lsr	r25
    2266:	87 95       	ror	r24
    2268:	97 f9       	bld	r25, 7
    226a:	08 95       	ret

0000226c <floor>:
    226c:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__fp_trunc>
    2270:	90 f0       	brcs	.+36     	; 0x2296 <floor+0x2a>
    2272:	9f 37       	cpi	r25, 0x7F	; 127
    2274:	48 f4       	brcc	.+18     	; 0x2288 <floor+0x1c>
    2276:	91 11       	cpse	r25, r1
    2278:	16 f0       	brts	.+4      	; 0x227e <floor+0x12>
    227a:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__fp_szero>
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	70 e0       	ldi	r23, 0x00	; 0
    2282:	80 e8       	ldi	r24, 0x80	; 128
    2284:	9f eb       	ldi	r25, 0xBF	; 191
    2286:	08 95       	ret
    2288:	26 f4       	brtc	.+8      	; 0x2292 <floor+0x26>
    228a:	1b 16       	cp	r1, r27
    228c:	61 1d       	adc	r22, r1
    228e:	71 1d       	adc	r23, r1
    2290:	81 1d       	adc	r24, r1
    2292:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__fp_mintl>
    2296:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__fp_mpack>

0000229a <__fp_cmp>:
    229a:	99 0f       	add	r25, r25
    229c:	00 08       	sbc	r0, r0
    229e:	55 0f       	add	r21, r21
    22a0:	aa 0b       	sbc	r26, r26
    22a2:	e0 e8       	ldi	r30, 0x80	; 128
    22a4:	fe ef       	ldi	r31, 0xFE	; 254
    22a6:	16 16       	cp	r1, r22
    22a8:	17 06       	cpc	r1, r23
    22aa:	e8 07       	cpc	r30, r24
    22ac:	f9 07       	cpc	r31, r25
    22ae:	c0 f0       	brcs	.+48     	; 0x22e0 <__fp_cmp+0x46>
    22b0:	12 16       	cp	r1, r18
    22b2:	13 06       	cpc	r1, r19
    22b4:	e4 07       	cpc	r30, r20
    22b6:	f5 07       	cpc	r31, r21
    22b8:	98 f0       	brcs	.+38     	; 0x22e0 <__fp_cmp+0x46>
    22ba:	62 1b       	sub	r22, r18
    22bc:	73 0b       	sbc	r23, r19
    22be:	84 0b       	sbc	r24, r20
    22c0:	95 0b       	sbc	r25, r21
    22c2:	39 f4       	brne	.+14     	; 0x22d2 <__fp_cmp+0x38>
    22c4:	0a 26       	eor	r0, r26
    22c6:	61 f0       	breq	.+24     	; 0x22e0 <__fp_cmp+0x46>
    22c8:	23 2b       	or	r18, r19
    22ca:	24 2b       	or	r18, r20
    22cc:	25 2b       	or	r18, r21
    22ce:	21 f4       	brne	.+8      	; 0x22d8 <__fp_cmp+0x3e>
    22d0:	08 95       	ret
    22d2:	0a 26       	eor	r0, r26
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <__fp_cmp+0x3e>
    22d6:	a1 40       	sbci	r26, 0x01	; 1
    22d8:	a6 95       	lsr	r26
    22da:	8f ef       	ldi	r24, 0xFF	; 255
    22dc:	81 1d       	adc	r24, r1
    22de:	81 1d       	adc	r24, r1
    22e0:	08 95       	ret

000022e2 <__fp_inf>:
    22e2:	97 f9       	bld	r25, 7
    22e4:	9f 67       	ori	r25, 0x7F	; 127
    22e6:	80 e8       	ldi	r24, 0x80	; 128
    22e8:	70 e0       	ldi	r23, 0x00	; 0
    22ea:	60 e0       	ldi	r22, 0x00	; 0
    22ec:	08 95       	ret

000022ee <__fp_mintl>:
    22ee:	88 23       	and	r24, r24
    22f0:	71 f4       	brne	.+28     	; 0x230e <__fp_mintl+0x20>
    22f2:	77 23       	and	r23, r23
    22f4:	21 f0       	breq	.+8      	; 0x22fe <__fp_mintl+0x10>
    22f6:	98 50       	subi	r25, 0x08	; 8
    22f8:	87 2b       	or	r24, r23
    22fa:	76 2f       	mov	r23, r22
    22fc:	07 c0       	rjmp	.+14     	; 0x230c <__fp_mintl+0x1e>
    22fe:	66 23       	and	r22, r22
    2300:	11 f4       	brne	.+4      	; 0x2306 <__fp_mintl+0x18>
    2302:	99 27       	eor	r25, r25
    2304:	0d c0       	rjmp	.+26     	; 0x2320 <__fp_mintl+0x32>
    2306:	90 51       	subi	r25, 0x10	; 16
    2308:	86 2b       	or	r24, r22
    230a:	70 e0       	ldi	r23, 0x00	; 0
    230c:	60 e0       	ldi	r22, 0x00	; 0
    230e:	2a f0       	brmi	.+10     	; 0x231a <__fp_mintl+0x2c>
    2310:	9a 95       	dec	r25
    2312:	66 0f       	add	r22, r22
    2314:	77 1f       	adc	r23, r23
    2316:	88 1f       	adc	r24, r24
    2318:	da f7       	brpl	.-10     	; 0x2310 <__fp_mintl+0x22>
    231a:	88 0f       	add	r24, r24
    231c:	96 95       	lsr	r25
    231e:	87 95       	ror	r24
    2320:	97 f9       	bld	r25, 7
    2322:	08 95       	ret

00002324 <__fp_mpack>:
    2324:	9f 3f       	cpi	r25, 0xFF	; 255
    2326:	31 f0       	breq	.+12     	; 0x2334 <__fp_mpack_finite+0xc>

00002328 <__fp_mpack_finite>:
    2328:	91 50       	subi	r25, 0x01	; 1
    232a:	20 f4       	brcc	.+8      	; 0x2334 <__fp_mpack_finite+0xc>
    232c:	87 95       	ror	r24
    232e:	77 95       	ror	r23
    2330:	67 95       	ror	r22
    2332:	b7 95       	ror	r27
    2334:	88 0f       	add	r24, r24
    2336:	91 1d       	adc	r25, r1
    2338:	96 95       	lsr	r25
    233a:	87 95       	ror	r24
    233c:	97 f9       	bld	r25, 7
    233e:	08 95       	ret

00002340 <__fp_nan>:
    2340:	9f ef       	ldi	r25, 0xFF	; 255
    2342:	80 ec       	ldi	r24, 0xC0	; 192
    2344:	08 95       	ret

00002346 <__fp_pscA>:
    2346:	00 24       	eor	r0, r0
    2348:	0a 94       	dec	r0
    234a:	16 16       	cp	r1, r22
    234c:	17 06       	cpc	r1, r23
    234e:	18 06       	cpc	r1, r24
    2350:	09 06       	cpc	r0, r25
    2352:	08 95       	ret

00002354 <__fp_pscB>:
    2354:	00 24       	eor	r0, r0
    2356:	0a 94       	dec	r0
    2358:	12 16       	cp	r1, r18
    235a:	13 06       	cpc	r1, r19
    235c:	14 06       	cpc	r1, r20
    235e:	05 06       	cpc	r0, r21
    2360:	08 95       	ret

00002362 <__fp_round>:
    2362:	09 2e       	mov	r0, r25
    2364:	03 94       	inc	r0
    2366:	00 0c       	add	r0, r0
    2368:	11 f4       	brne	.+4      	; 0x236e <__fp_round+0xc>
    236a:	88 23       	and	r24, r24
    236c:	52 f0       	brmi	.+20     	; 0x2382 <__fp_round+0x20>
    236e:	bb 0f       	add	r27, r27
    2370:	40 f4       	brcc	.+16     	; 0x2382 <__fp_round+0x20>
    2372:	bf 2b       	or	r27, r31
    2374:	11 f4       	brne	.+4      	; 0x237a <__fp_round+0x18>
    2376:	60 ff       	sbrs	r22, 0
    2378:	04 c0       	rjmp	.+8      	; 0x2382 <__fp_round+0x20>
    237a:	6f 5f       	subi	r22, 0xFF	; 255
    237c:	7f 4f       	sbci	r23, 0xFF	; 255
    237e:	8f 4f       	sbci	r24, 0xFF	; 255
    2380:	9f 4f       	sbci	r25, 0xFF	; 255
    2382:	08 95       	ret

00002384 <__fp_split3>:
    2384:	57 fd       	sbrc	r21, 7
    2386:	90 58       	subi	r25, 0x80	; 128
    2388:	44 0f       	add	r20, r20
    238a:	55 1f       	adc	r21, r21
    238c:	59 f0       	breq	.+22     	; 0x23a4 <__fp_splitA+0x10>
    238e:	5f 3f       	cpi	r21, 0xFF	; 255
    2390:	71 f0       	breq	.+28     	; 0x23ae <__fp_splitA+0x1a>
    2392:	47 95       	ror	r20

00002394 <__fp_splitA>:
    2394:	88 0f       	add	r24, r24
    2396:	97 fb       	bst	r25, 7
    2398:	99 1f       	adc	r25, r25
    239a:	61 f0       	breq	.+24     	; 0x23b4 <__fp_splitA+0x20>
    239c:	9f 3f       	cpi	r25, 0xFF	; 255
    239e:	79 f0       	breq	.+30     	; 0x23be <__fp_splitA+0x2a>
    23a0:	87 95       	ror	r24
    23a2:	08 95       	ret
    23a4:	12 16       	cp	r1, r18
    23a6:	13 06       	cpc	r1, r19
    23a8:	14 06       	cpc	r1, r20
    23aa:	55 1f       	adc	r21, r21
    23ac:	f2 cf       	rjmp	.-28     	; 0x2392 <__fp_split3+0xe>
    23ae:	46 95       	lsr	r20
    23b0:	f1 df       	rcall	.-30     	; 0x2394 <__fp_splitA>
    23b2:	08 c0       	rjmp	.+16     	; 0x23c4 <__fp_splitA+0x30>
    23b4:	16 16       	cp	r1, r22
    23b6:	17 06       	cpc	r1, r23
    23b8:	18 06       	cpc	r1, r24
    23ba:	99 1f       	adc	r25, r25
    23bc:	f1 cf       	rjmp	.-30     	; 0x23a0 <__fp_splitA+0xc>
    23be:	86 95       	lsr	r24
    23c0:	71 05       	cpc	r23, r1
    23c2:	61 05       	cpc	r22, r1
    23c4:	08 94       	sec
    23c6:	08 95       	ret

000023c8 <__fp_trunc>:
    23c8:	0e 94 ca 11 	call	0x2394	; 0x2394 <__fp_splitA>
    23cc:	a0 f0       	brcs	.+40     	; 0x23f6 <__fp_trunc+0x2e>
    23ce:	be e7       	ldi	r27, 0x7E	; 126
    23d0:	b9 17       	cp	r27, r25
    23d2:	88 f4       	brcc	.+34     	; 0x23f6 <__fp_trunc+0x2e>
    23d4:	bb 27       	eor	r27, r27
    23d6:	9f 38       	cpi	r25, 0x8F	; 143
    23d8:	60 f4       	brcc	.+24     	; 0x23f2 <__fp_trunc+0x2a>
    23da:	16 16       	cp	r1, r22
    23dc:	b1 1d       	adc	r27, r1
    23de:	67 2f       	mov	r22, r23
    23e0:	78 2f       	mov	r23, r24
    23e2:	88 27       	eor	r24, r24
    23e4:	98 5f       	subi	r25, 0xF8	; 248
    23e6:	f7 cf       	rjmp	.-18     	; 0x23d6 <__fp_trunc+0xe>
    23e8:	86 95       	lsr	r24
    23ea:	77 95       	ror	r23
    23ec:	67 95       	ror	r22
    23ee:	b1 1d       	adc	r27, r1
    23f0:	93 95       	inc	r25
    23f2:	96 39       	cpi	r25, 0x96	; 150
    23f4:	c8 f3       	brcs	.-14     	; 0x23e8 <__fp_trunc+0x20>
    23f6:	08 95       	ret

000023f8 <__fp_zero>:
    23f8:	e8 94       	clt

000023fa <__fp_szero>:
    23fa:	bb 27       	eor	r27, r27
    23fc:	66 27       	eor	r22, r22
    23fe:	77 27       	eor	r23, r23
    2400:	cb 01       	movw	r24, r22
    2402:	97 f9       	bld	r25, 7
    2404:	08 95       	ret

00002406 <__gesf2>:
    2406:	0e 94 4d 11 	call	0x229a	; 0x229a <__fp_cmp>
    240a:	08 f4       	brcc	.+2      	; 0x240e <__gesf2+0x8>
    240c:	8f ef       	ldi	r24, 0xFF	; 255
    240e:	08 95       	ret

00002410 <__mulsf3>:
    2410:	0e 94 1b 12 	call	0x2436	; 0x2436 <__mulsf3x>
    2414:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__fp_round>
    2418:	0e 94 a3 11 	call	0x2346	; 0x2346 <__fp_pscA>
    241c:	38 f0       	brcs	.+14     	; 0x242c <__mulsf3+0x1c>
    241e:	0e 94 aa 11 	call	0x2354	; 0x2354 <__fp_pscB>
    2422:	20 f0       	brcs	.+8      	; 0x242c <__mulsf3+0x1c>
    2424:	95 23       	and	r25, r21
    2426:	11 f0       	breq	.+4      	; 0x242c <__mulsf3+0x1c>
    2428:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__fp_inf>
    242c:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__fp_nan>
    2430:	11 24       	eor	r1, r1
    2432:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__fp_szero>

00002436 <__mulsf3x>:
    2436:	0e 94 c2 11 	call	0x2384	; 0x2384 <__fp_split3>
    243a:	70 f3       	brcs	.-36     	; 0x2418 <__mulsf3+0x8>

0000243c <__mulsf3_pse>:
    243c:	95 9f       	mul	r25, r21
    243e:	c1 f3       	breq	.-16     	; 0x2430 <__mulsf3+0x20>
    2440:	95 0f       	add	r25, r21
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	55 1f       	adc	r21, r21
    2446:	62 9f       	mul	r22, r18
    2448:	f0 01       	movw	r30, r0
    244a:	72 9f       	mul	r23, r18
    244c:	bb 27       	eor	r27, r27
    244e:	f0 0d       	add	r31, r0
    2450:	b1 1d       	adc	r27, r1
    2452:	63 9f       	mul	r22, r19
    2454:	aa 27       	eor	r26, r26
    2456:	f0 0d       	add	r31, r0
    2458:	b1 1d       	adc	r27, r1
    245a:	aa 1f       	adc	r26, r26
    245c:	64 9f       	mul	r22, r20
    245e:	66 27       	eor	r22, r22
    2460:	b0 0d       	add	r27, r0
    2462:	a1 1d       	adc	r26, r1
    2464:	66 1f       	adc	r22, r22
    2466:	82 9f       	mul	r24, r18
    2468:	22 27       	eor	r18, r18
    246a:	b0 0d       	add	r27, r0
    246c:	a1 1d       	adc	r26, r1
    246e:	62 1f       	adc	r22, r18
    2470:	73 9f       	mul	r23, r19
    2472:	b0 0d       	add	r27, r0
    2474:	a1 1d       	adc	r26, r1
    2476:	62 1f       	adc	r22, r18
    2478:	83 9f       	mul	r24, r19
    247a:	a0 0d       	add	r26, r0
    247c:	61 1d       	adc	r22, r1
    247e:	22 1f       	adc	r18, r18
    2480:	74 9f       	mul	r23, r20
    2482:	33 27       	eor	r19, r19
    2484:	a0 0d       	add	r26, r0
    2486:	61 1d       	adc	r22, r1
    2488:	23 1f       	adc	r18, r19
    248a:	84 9f       	mul	r24, r20
    248c:	60 0d       	add	r22, r0
    248e:	21 1d       	adc	r18, r1
    2490:	82 2f       	mov	r24, r18
    2492:	76 2f       	mov	r23, r22
    2494:	6a 2f       	mov	r22, r26
    2496:	11 24       	eor	r1, r1
    2498:	9f 57       	subi	r25, 0x7F	; 127
    249a:	50 40       	sbci	r21, 0x00	; 0
    249c:	9a f0       	brmi	.+38     	; 0x24c4 <__mulsf3_pse+0x88>
    249e:	f1 f0       	breq	.+60     	; 0x24dc <__mulsf3_pse+0xa0>
    24a0:	88 23       	and	r24, r24
    24a2:	4a f0       	brmi	.+18     	; 0x24b6 <__mulsf3_pse+0x7a>
    24a4:	ee 0f       	add	r30, r30
    24a6:	ff 1f       	adc	r31, r31
    24a8:	bb 1f       	adc	r27, r27
    24aa:	66 1f       	adc	r22, r22
    24ac:	77 1f       	adc	r23, r23
    24ae:	88 1f       	adc	r24, r24
    24b0:	91 50       	subi	r25, 0x01	; 1
    24b2:	50 40       	sbci	r21, 0x00	; 0
    24b4:	a9 f7       	brne	.-22     	; 0x24a0 <__mulsf3_pse+0x64>
    24b6:	9e 3f       	cpi	r25, 0xFE	; 254
    24b8:	51 05       	cpc	r21, r1
    24ba:	80 f0       	brcs	.+32     	; 0x24dc <__mulsf3_pse+0xa0>
    24bc:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__fp_inf>
    24c0:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__fp_szero>
    24c4:	5f 3f       	cpi	r21, 0xFF	; 255
    24c6:	e4 f3       	brlt	.-8      	; 0x24c0 <__mulsf3_pse+0x84>
    24c8:	98 3e       	cpi	r25, 0xE8	; 232
    24ca:	d4 f3       	brlt	.-12     	; 0x24c0 <__mulsf3_pse+0x84>
    24cc:	86 95       	lsr	r24
    24ce:	77 95       	ror	r23
    24d0:	67 95       	ror	r22
    24d2:	b7 95       	ror	r27
    24d4:	f7 95       	ror	r31
    24d6:	e7 95       	ror	r30
    24d8:	9f 5f       	subi	r25, 0xFF	; 255
    24da:	c1 f7       	brne	.-16     	; 0x24cc <__mulsf3_pse+0x90>
    24dc:	fe 2b       	or	r31, r30
    24de:	88 0f       	add	r24, r24
    24e0:	91 1d       	adc	r25, r1
    24e2:	96 95       	lsr	r25
    24e4:	87 95       	ror	r24
    24e6:	97 f9       	bld	r25, 7
    24e8:	08 95       	ret

000024ea <round>:
    24ea:	0e 94 ca 11 	call	0x2394	; 0x2394 <__fp_splitA>
    24ee:	e8 f0       	brcs	.+58     	; 0x252a <round+0x40>
    24f0:	9e 37       	cpi	r25, 0x7E	; 126
    24f2:	e8 f0       	brcs	.+58     	; 0x252e <round+0x44>
    24f4:	96 39       	cpi	r25, 0x96	; 150
    24f6:	b8 f4       	brcc	.+46     	; 0x2526 <round+0x3c>
    24f8:	9e 38       	cpi	r25, 0x8E	; 142
    24fa:	48 f4       	brcc	.+18     	; 0x250e <round+0x24>
    24fc:	67 2f       	mov	r22, r23
    24fe:	78 2f       	mov	r23, r24
    2500:	88 27       	eor	r24, r24
    2502:	98 5f       	subi	r25, 0xF8	; 248
    2504:	f9 cf       	rjmp	.-14     	; 0x24f8 <round+0xe>
    2506:	86 95       	lsr	r24
    2508:	77 95       	ror	r23
    250a:	67 95       	ror	r22
    250c:	93 95       	inc	r25
    250e:	95 39       	cpi	r25, 0x95	; 149
    2510:	d0 f3       	brcs	.-12     	; 0x2506 <round+0x1c>
    2512:	b6 2f       	mov	r27, r22
    2514:	b1 70       	andi	r27, 0x01	; 1
    2516:	6b 0f       	add	r22, r27
    2518:	71 1d       	adc	r23, r1
    251a:	81 1d       	adc	r24, r1
    251c:	20 f4       	brcc	.+8      	; 0x2526 <round+0x3c>
    251e:	87 95       	ror	r24
    2520:	77 95       	ror	r23
    2522:	67 95       	ror	r22
    2524:	93 95       	inc	r25
    2526:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <__fp_mintl>
    252a:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__fp_mpack>
    252e:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__fp_szero>

00002532 <__divmodhi4>:
    2532:	97 fb       	bst	r25, 7
    2534:	07 2e       	mov	r0, r23
    2536:	16 f4       	brtc	.+4      	; 0x253c <__divmodhi4+0xa>
    2538:	00 94       	com	r0
    253a:	07 d0       	rcall	.+14     	; 0x254a <__divmodhi4_neg1>
    253c:	77 fd       	sbrc	r23, 7
    253e:	09 d0       	rcall	.+18     	; 0x2552 <__divmodhi4_neg2>
    2540:	0e 94 ad 12 	call	0x255a	; 0x255a <__udivmodhi4>
    2544:	07 fc       	sbrc	r0, 7
    2546:	05 d0       	rcall	.+10     	; 0x2552 <__divmodhi4_neg2>
    2548:	3e f4       	brtc	.+14     	; 0x2558 <__divmodhi4_exit>

0000254a <__divmodhi4_neg1>:
    254a:	90 95       	com	r25
    254c:	81 95       	neg	r24
    254e:	9f 4f       	sbci	r25, 0xFF	; 255
    2550:	08 95       	ret

00002552 <__divmodhi4_neg2>:
    2552:	70 95       	com	r23
    2554:	61 95       	neg	r22
    2556:	7f 4f       	sbci	r23, 0xFF	; 255

00002558 <__divmodhi4_exit>:
    2558:	08 95       	ret

0000255a <__udivmodhi4>:
    255a:	aa 1b       	sub	r26, r26
    255c:	bb 1b       	sub	r27, r27
    255e:	51 e1       	ldi	r21, 0x11	; 17
    2560:	07 c0       	rjmp	.+14     	; 0x2570 <__udivmodhi4_ep>

00002562 <__udivmodhi4_loop>:
    2562:	aa 1f       	adc	r26, r26
    2564:	bb 1f       	adc	r27, r27
    2566:	a6 17       	cp	r26, r22
    2568:	b7 07       	cpc	r27, r23
    256a:	10 f0       	brcs	.+4      	; 0x2570 <__udivmodhi4_ep>
    256c:	a6 1b       	sub	r26, r22
    256e:	b7 0b       	sbc	r27, r23

00002570 <__udivmodhi4_ep>:
    2570:	88 1f       	adc	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	5a 95       	dec	r21
    2576:	a9 f7       	brne	.-22     	; 0x2562 <__udivmodhi4_loop>
    2578:	80 95       	com	r24
    257a:	90 95       	com	r25
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	08 95       	ret

00002582 <do_rand>:
    2582:	8f 92       	push	r8
    2584:	9f 92       	push	r9
    2586:	af 92       	push	r10
    2588:	bf 92       	push	r11
    258a:	cf 92       	push	r12
    258c:	df 92       	push	r13
    258e:	ef 92       	push	r14
    2590:	ff 92       	push	r15
    2592:	cf 93       	push	r28
    2594:	df 93       	push	r29
    2596:	ec 01       	movw	r28, r24
    2598:	68 81       	ld	r22, Y
    259a:	79 81       	ldd	r23, Y+1	; 0x01
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	9b 81       	ldd	r25, Y+3	; 0x03
    25a0:	61 15       	cp	r22, r1
    25a2:	71 05       	cpc	r23, r1
    25a4:	81 05       	cpc	r24, r1
    25a6:	91 05       	cpc	r25, r1
    25a8:	21 f4       	brne	.+8      	; 0x25b2 <do_rand+0x30>
    25aa:	64 e2       	ldi	r22, 0x24	; 36
    25ac:	79 ed       	ldi	r23, 0xD9	; 217
    25ae:	8b e5       	ldi	r24, 0x5B	; 91
    25b0:	97 e0       	ldi	r25, 0x07	; 7
    25b2:	2d e1       	ldi	r18, 0x1D	; 29
    25b4:	33 ef       	ldi	r19, 0xF3	; 243
    25b6:	41 e0       	ldi	r20, 0x01	; 1
    25b8:	50 e0       	ldi	r21, 0x00	; 0
    25ba:	0e 94 1d 13 	call	0x263a	; 0x263a <__divmodsi4>
    25be:	49 01       	movw	r8, r18
    25c0:	5a 01       	movw	r10, r20
    25c2:	9b 01       	movw	r18, r22
    25c4:	ac 01       	movw	r20, r24
    25c6:	a7 ea       	ldi	r26, 0xA7	; 167
    25c8:	b1 e4       	ldi	r27, 0x41	; 65
    25ca:	0e 94 3c 13 	call	0x2678	; 0x2678 <__muluhisi3>
    25ce:	6b 01       	movw	r12, r22
    25d0:	7c 01       	movw	r14, r24
    25d2:	ac ee       	ldi	r26, 0xEC	; 236
    25d4:	b4 ef       	ldi	r27, 0xF4	; 244
    25d6:	a5 01       	movw	r20, r10
    25d8:	94 01       	movw	r18, r8
    25da:	0e 94 4a 13 	call	0x2694	; 0x2694 <__mulohisi3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	8c 0d       	add	r24, r12
    25e4:	9d 1d       	adc	r25, r13
    25e6:	ae 1d       	adc	r26, r14
    25e8:	bf 1d       	adc	r27, r15
    25ea:	b7 ff       	sbrs	r27, 7
    25ec:	03 c0       	rjmp	.+6      	; 0x25f4 <do_rand+0x72>
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	a1 09       	sbc	r26, r1
    25f2:	b0 48       	sbci	r27, 0x80	; 128
    25f4:	88 83       	st	Y, r24
    25f6:	99 83       	std	Y+1, r25	; 0x01
    25f8:	aa 83       	std	Y+2, r26	; 0x02
    25fa:	bb 83       	std	Y+3, r27	; 0x03
    25fc:	9f 77       	andi	r25, 0x7F	; 127
    25fe:	df 91       	pop	r29
    2600:	cf 91       	pop	r28
    2602:	ff 90       	pop	r15
    2604:	ef 90       	pop	r14
    2606:	df 90       	pop	r13
    2608:	cf 90       	pop	r12
    260a:	bf 90       	pop	r11
    260c:	af 90       	pop	r10
    260e:	9f 90       	pop	r9
    2610:	8f 90       	pop	r8
    2612:	08 95       	ret

00002614 <rand_r>:
    2614:	0e 94 c1 12 	call	0x2582	; 0x2582 <do_rand>
    2618:	08 95       	ret

0000261a <rand>:
    261a:	80 e6       	ldi	r24, 0x60	; 96
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	0e 94 c1 12 	call	0x2582	; 0x2582 <do_rand>
    2622:	08 95       	ret

00002624 <srand>:
    2624:	a0 e0       	ldi	r26, 0x00	; 0
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    262c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
    2630:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
    2634:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
    2638:	08 95       	ret

0000263a <__divmodsi4>:
    263a:	05 2e       	mov	r0, r21
    263c:	97 fb       	bst	r25, 7
    263e:	1e f4       	brtc	.+6      	; 0x2646 <__divmodsi4+0xc>
    2640:	00 94       	com	r0
    2642:	0e 94 34 13 	call	0x2668	; 0x2668 <__negsi2>
    2646:	57 fd       	sbrc	r21, 7
    2648:	07 d0       	rcall	.+14     	; 0x2658 <__divmodsi4_neg2>
    264a:	0e 94 4f 13 	call	0x269e	; 0x269e <__udivmodsi4>
    264e:	07 fc       	sbrc	r0, 7
    2650:	03 d0       	rcall	.+6      	; 0x2658 <__divmodsi4_neg2>
    2652:	4e f4       	brtc	.+18     	; 0x2666 <__divmodsi4_exit>
    2654:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__negsi2>

00002658 <__divmodsi4_neg2>:
    2658:	50 95       	com	r21
    265a:	40 95       	com	r20
    265c:	30 95       	com	r19
    265e:	21 95       	neg	r18
    2660:	3f 4f       	sbci	r19, 0xFF	; 255
    2662:	4f 4f       	sbci	r20, 0xFF	; 255
    2664:	5f 4f       	sbci	r21, 0xFF	; 255

00002666 <__divmodsi4_exit>:
    2666:	08 95       	ret

00002668 <__negsi2>:
    2668:	90 95       	com	r25
    266a:	80 95       	com	r24
    266c:	70 95       	com	r23
    266e:	61 95       	neg	r22
    2670:	7f 4f       	sbci	r23, 0xFF	; 255
    2672:	8f 4f       	sbci	r24, 0xFF	; 255
    2674:	9f 4f       	sbci	r25, 0xFF	; 255
    2676:	08 95       	ret

00002678 <__muluhisi3>:
    2678:	0e 94 71 13 	call	0x26e2	; 0x26e2 <__umulhisi3>
    267c:	a5 9f       	mul	r26, r21
    267e:	90 0d       	add	r25, r0
    2680:	b4 9f       	mul	r27, r20
    2682:	90 0d       	add	r25, r0
    2684:	a4 9f       	mul	r26, r20
    2686:	80 0d       	add	r24, r0
    2688:	91 1d       	adc	r25, r1
    268a:	11 24       	eor	r1, r1
    268c:	08 95       	ret

0000268e <__mulshisi3>:
    268e:	b7 ff       	sbrs	r27, 7
    2690:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__muluhisi3>

00002694 <__mulohisi3>:
    2694:	0e 94 3c 13 	call	0x2678	; 0x2678 <__muluhisi3>
    2698:	82 1b       	sub	r24, r18
    269a:	93 0b       	sbc	r25, r19
    269c:	08 95       	ret

0000269e <__udivmodsi4>:
    269e:	a1 e2       	ldi	r26, 0x21	; 33
    26a0:	1a 2e       	mov	r1, r26
    26a2:	aa 1b       	sub	r26, r26
    26a4:	bb 1b       	sub	r27, r27
    26a6:	fd 01       	movw	r30, r26
    26a8:	0d c0       	rjmp	.+26     	; 0x26c4 <__udivmodsi4_ep>

000026aa <__udivmodsi4_loop>:
    26aa:	aa 1f       	adc	r26, r26
    26ac:	bb 1f       	adc	r27, r27
    26ae:	ee 1f       	adc	r30, r30
    26b0:	ff 1f       	adc	r31, r31
    26b2:	a2 17       	cp	r26, r18
    26b4:	b3 07       	cpc	r27, r19
    26b6:	e4 07       	cpc	r30, r20
    26b8:	f5 07       	cpc	r31, r21
    26ba:	20 f0       	brcs	.+8      	; 0x26c4 <__udivmodsi4_ep>
    26bc:	a2 1b       	sub	r26, r18
    26be:	b3 0b       	sbc	r27, r19
    26c0:	e4 0b       	sbc	r30, r20
    26c2:	f5 0b       	sbc	r31, r21

000026c4 <__udivmodsi4_ep>:
    26c4:	66 1f       	adc	r22, r22
    26c6:	77 1f       	adc	r23, r23
    26c8:	88 1f       	adc	r24, r24
    26ca:	99 1f       	adc	r25, r25
    26cc:	1a 94       	dec	r1
    26ce:	69 f7       	brne	.-38     	; 0x26aa <__udivmodsi4_loop>
    26d0:	60 95       	com	r22
    26d2:	70 95       	com	r23
    26d4:	80 95       	com	r24
    26d6:	90 95       	com	r25
    26d8:	9b 01       	movw	r18, r22
    26da:	ac 01       	movw	r20, r24
    26dc:	bd 01       	movw	r22, r26
    26de:	cf 01       	movw	r24, r30
    26e0:	08 95       	ret

000026e2 <__umulhisi3>:
    26e2:	a2 9f       	mul	r26, r18
    26e4:	b0 01       	movw	r22, r0
    26e6:	b3 9f       	mul	r27, r19
    26e8:	c0 01       	movw	r24, r0
    26ea:	a3 9f       	mul	r26, r19
    26ec:	70 0d       	add	r23, r0
    26ee:	81 1d       	adc	r24, r1
    26f0:	11 24       	eor	r1, r1
    26f2:	91 1d       	adc	r25, r1
    26f4:	b2 9f       	mul	r27, r18
    26f6:	70 0d       	add	r23, r0
    26f8:	81 1d       	adc	r24, r1
    26fa:	11 24       	eor	r1, r1
    26fc:	91 1d       	adc	r25, r1
    26fe:	08 95       	ret

00002700 <_exit>:
    2700:	f8 94       	cli

00002702 <__stop_program>:
    2702:	ff cf       	rjmp	.-2      	; 0x2702 <__stop_program>
